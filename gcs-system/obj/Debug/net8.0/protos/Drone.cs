// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/drone.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KisaGcsSystem.Services {

  /// <summary>Holder for reflection information generated from protos/drone.proto</summary>
  public static partial class DroneReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/drone.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DroneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90b3MvZHJvbmUucHJvdG8SGGtpc2FfZ2NzX3N5c3RlbS5TZXJ2aWNl",
            "cxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byJcChhVcGRhdGVE",
            "cm9uZVN0YXR1c1BheWxvYWQSQAoNZHJvbmVTdGF0dXNlcxgBIAMoCzIpLmtp",
            "c2FfZ2NzX3N5c3RlbS5TZXJ2aWNlcy5HcnBjRHJvbmVTdGF0dXMi5wIKD0dy",
            "cGNEcm9uZVN0YXR1cxIUCgdEcm9uZUlkGAEgASgJSACIAQESFQoIRmxpZ2h0",
            "SWQYAiABKAlIAYgBARIVCghJc09ubGluZRgDIAEoCEgCiAEBEhUKCElzTGFu",
            "ZGVkGAQgASgISAOIAQESGAoLQ29udHJvbGxTdHQYBSABKAlIBIgBARI9CghE",
            "cm9uZVN0dBgGIAEoCzImLmtpc2FfZ2NzX3N5c3RlbS5TZXJ2aWNlcy5HcnBj",
            "RHJvbmVTdHRIBYgBARJBCgpTZW5zb3JEYXRhGAcgASgLMigua2lzYV9nY3Nf",
            "c3lzdGVtLlNlcnZpY2VzLkdycGNTZW5zb3JEYXRhSAaIAQFCCgoIX0Ryb25l",
            "SWRCCwoJX0ZsaWdodElkQgsKCV9Jc09ubGluZUILCglfSXNMYW5kZWRCDgoM",
            "X0NvbnRyb2xsU3R0QgsKCV9Ecm9uZVN0dEINCgtfU2Vuc29yRGF0YSKWBAoM",
            "R3JwY0Ryb25lU3R0EhMKBlBvd2VyVhgBIAEoAkgAiAEBEhcKCkJhdHRlcnlT",
            "dHQYAiABKBFIAYgBARITCgZHcHNTdHQYAyABKAlIAogBARISCgVUZW1wQxgE",
            "IAEoAUgDiAEBEhAKA0xhdBgFIAEoAUgEiAEBEhAKA0xvbhgGIAEoAUgFiAEB",
            "EhAKA0FsdBgHIAEoAUgGiAEBEhYKCUdsb2JhbEFsdBgIIAEoAUgHiAEBEhEK",
            "BFJvbGwYCSABKAFICIgBARISCgVQaXRjaBgKIAEoAUgJiAEBEhEKBEhlYWQY",
            "CyABKAVICogBARISCgVTcGVlZBgMIAEoAkgLiAEBEhUKCEhvdmVyU3R0GA0g",
            "ASgJSAyIAQESEQoESERPUBgOIAEoAUgNiAEBEhwKD1NhdGVsbGl0ZXNDb3Vu",
            "dBgPIAEoBUgOiAEBEhcKCkZsaWdodE1vZGUYECABKAVID4gBAUIJCgdfUG93",
            "ZXJWQg0KC19CYXR0ZXJ5U3R0QgkKB19HcHNTdHRCCAoGX1RlbXBDQgYKBF9M",
            "YXRCBgoEX0xvbkIGCgRfQWx0QgwKCl9HbG9iYWxBbHRCBwoFX1JvbGxCCAoG",
            "X1BpdGNoQgcKBV9IZWFkQggKBl9TcGVlZEILCglfSG92ZXJTdHRCBwoFX0hE",
            "T1BCEgoQX1NhdGVsbGl0ZXNDb3VudEINCgtfRmxpZ2h0TW9kZSLqEgoOR3Jw",
            "Y1NlbnNvckRhdGESGgoNcm9sbF9BVFRJVFVERRgBIAEoAkgAiAEBEhsKDnBp",
            "dGNoX0FUVElUVURFGAIgASgCSAGIAQESGQoMeWF3X0FUVElUVURFGAMgASgC",
            "SAKIAQESGQoMeGFjY19SQVdfSU1VGAQgASgFSAOIAQESGQoMeWFjY19SQVdf",
            "SU1VGAUgASgFSASIAQESGQoMemFjY19SQVdfSU1VGAYgASgFSAWIAQESGgoN",
            "eGd5cm9fUkFXX0lNVRgHIAEoBUgGiAEBEhoKDXlneXJvX1JBV19JTVUYCCAB",
            "KAVIB4gBARIaCg16Z3lyb19SQVdfSU1VGAkgASgFSAiIAQESGQoMeG1hZ19S",
            "QVdfSU1VGAogASgFSAmIAQESGQoMeW1hZ19SQVdfSU1VGAsgASgFSAqIAQES",
            "GQoMem1hZ19SQVdfSU1VGAwgASgFSAuIAQESIgoVdmlicmF0aW9uX3hfVklC",
            "UkFUSU9OGA0gASgCSAyIAQESIgoVdmlicmF0aW9uX3lfVklCUkFUSU9OGA4g",
            "ASgCSA2IAQESIgoVdmlicmF0aW9uX3pfVklCUkFUSU9OGA8gASgCSA6IAQES",
            "JwoaYWNjZWxfY2FsX3hfU0VOU09SX09GRlNFVFMYECABKAJID4gBARInChph",
            "Y2NlbF9jYWxfeV9TRU5TT1JfT0ZGU0VUUxgRIAEoAkgQiAEBEicKGmFjY2Vs",
            "X2NhbF96X1NFTlNPUl9PRkZTRVRTGBIgASgCSBGIAQESJQoYbWFnX29mc194",
            "X1NFTlNPUl9PRkZTRVRTGBMgASgFSBKIAQESJQoYbWFnX29mc195X1NFTlNP",
            "Ul9PRkZTRVRTGBQgASgFSBOIAQESIwoWdnhfR0xPQkFMX1BPU0lUSU9OX0lO",
            "VBgVIAEoBUgUiAEBEiMKFnZ5X0dMT0JBTF9QT1NJVElPTl9JTlQYFiABKAVI",
            "FYgBARIhChR4X0xPQ0FMX1BPU0lUSU9OX05FRBgXIAEoAkgWiAEBEiIKFXZ4",
            "X0xPQ0FMX1BPU0lUSU9OX05FRBgYIAEoAkgXiAEBEiIKFXZ5X0xPQ0FMX1BP",
            "U0lUSU9OX05FRBgZIAEoAkgYiAEBEiwKH25hdl9waXRjaF9OQVZfQ09OVFJP",
            "TExFUl9PVVRQVVQYGiABKAJIGYgBARIuCiFuYXZfYmVhcmluZ19OQVZfQ09O",
            "VFJPTExFUl9PVVRQVVQYGyABKAVIGogBARIoChtzZXJ2bzNfcmF3X1NFUlZP",
            "X09VVFBVVF9SQVcYHCABKA1IG4gBARIoChtzZXJ2bzhfcmF3X1NFUlZPX09V",
            "VFBVVF9SQVcYHSABKA1IHIgBARIgChNncm91bmRzcGVlZF9WRlJfSFVEGB4g",
            "ASgCSB2IAQESHQoQYWlyc3BlZWRfVkZSX0hVRBgfIAEoAkgeiAEBEiYKGXBy",
            "ZXNzX2Fic19TQ0FMRURfUFJFU1NVUkUYICABKAJIH4gBARIgChNWc2Vydm9f",
            "UE9XRVJfU1RBVFVTGCEgASgNSCCIAQESJQoYdm9sdGFnZXMxX0JBVFRFUllf",
            "U1RBVFVTGCIgASgBSCGIAQESIgoVY2hhbmNvdW50X1JDX0NIQU5ORUxTGCMg",
            "ASgFSCKIAQESIwoWY2hhbjEyX3Jhd19SQ19DSEFOTkVMUxgkIAEoDUgjiAEB",
            "EiMKFmNoYW4xM19yYXdfUkNfQ0hBTk5FTFMYJSABKA1IJIgBARIjChZjaGFu",
            "MTRfcmF3X1JDX0NIQU5ORUxTGCYgASgNSCWIAQESIwoWY2hhbjE1X3Jhd19S",
            "Q19DSEFOTkVMUxgnIAEoDUgmiAEBEiMKFmNoYW4xNl9yYXdfUkNfQ0hBTk5F",
            "TFMYKCABKA1IJ4gBAUIQCg5fcm9sbF9BVFRJVFVERUIRCg9fcGl0Y2hfQVRU",
            "SVRVREVCDwoNX3lhd19BVFRJVFVERUIPCg1feGFjY19SQVdfSU1VQg8KDV95",
            "YWNjX1JBV19JTVVCDwoNX3phY2NfUkFXX0lNVUIQCg5feGd5cm9fUkFXX0lN",
            "VUIQCg5feWd5cm9fUkFXX0lNVUIQCg5femd5cm9fUkFXX0lNVUIPCg1feG1h",
            "Z19SQVdfSU1VQg8KDV95bWFnX1JBV19JTVVCDwoNX3ptYWdfUkFXX0lNVUIY",
            "ChZfdmlicmF0aW9uX3hfVklCUkFUSU9OQhgKFl92aWJyYXRpb25feV9WSUJS",
            "QVRJT05CGAoWX3ZpYnJhdGlvbl96X1ZJQlJBVElPTkIdChtfYWNjZWxfY2Fs",
            "X3hfU0VOU09SX09GRlNFVFNCHQobX2FjY2VsX2NhbF95X1NFTlNPUl9PRkZT",
            "RVRTQh0KG19hY2NlbF9jYWxfel9TRU5TT1JfT0ZGU0VUU0IbChlfbWFnX29m",
            "c194X1NFTlNPUl9PRkZTRVRTQhsKGV9tYWdfb2ZzX3lfU0VOU09SX09GRlNF",
            "VFNCGQoXX3Z4X0dMT0JBTF9QT1NJVElPTl9JTlRCGQoXX3Z5X0dMT0JBTF9Q",
            "T1NJVElPTl9JTlRCFwoVX3hfTE9DQUxfUE9TSVRJT05fTkVEQhgKFl92eF9M",
            "T0NBTF9QT1NJVElPTl9ORURCGAoWX3Z5X0xPQ0FMX1BPU0lUSU9OX05FREIi",
            "CiBfbmF2X3BpdGNoX05BVl9DT05UUk9MTEVSX09VVFBVVEIkCiJfbmF2X2Jl",
            "YXJpbmdfTkFWX0NPTlRST0xMRVJfT1VUUFVUQh4KHF9zZXJ2bzNfcmF3X1NF",
            "UlZPX09VVFBVVF9SQVdCHgocX3NlcnZvOF9yYXdfU0VSVk9fT1VUUFVUX1JB",
            "V0IWChRfZ3JvdW5kc3BlZWRfVkZSX0hVREITChFfYWlyc3BlZWRfVkZSX0hV",
            "REIcChpfcHJlc3NfYWJzX1NDQUxFRF9QUkVTU1VSRUIWChRfVnNlcnZvX1BP",
            "V0VSX1NUQVRVU0IbChlfdm9sdGFnZXMxX0JBVFRFUllfU1RBVFVTQhgKFl9j",
            "aGFuY291bnRfUkNfQ0hBTk5FTFNCGQoXX2NoYW4xMl9yYXdfUkNfQ0hBTk5F",
            "TFNCGQoXX2NoYW4xM19yYXdfUkNfQ0hBTk5FTFNCGQoXX2NoYW4xNF9yYXdf",
            "UkNfQ0hBTk5FTFNCGQoXX2NoYW4xNV9yYXdfUkNfQ0hBTk5FTFNCGQoXX2No",
            "YW4xNl9yYXdfUkNfQ0hBTk5FTFMioQEKDlN0YXR1c1Jlc3BvbnNlEg8KB0Ry",
            "b25lSWQYASABKAkSPgoLUHJlZGljdERhdGEYAiABKAsyKS5raXNhX2djc19z",
            "eXN0ZW0uU2VydmljZXMuR3JwY1ByZWRpY3REYXRhEj4KC1dhcm5pbmdEYXRh",
            "GAMgASgLMikua2lzYV9nY3Nfc3lzdGVtLlNlcnZpY2VzLkdycGNXYXJuaW5n",
            "RGF0YSLZAwoPR3JwY1ByZWRpY3REYXRhEhwKFHJvbGxBVFRJVFVERV9QUkVE",
            "SUNUGAEgASgBEhsKE3lhd0FUVElUVURFX1BSRURJQ1QYAiABKAESHQoVcGl0",
            "Y2hBVFRJVFVERV9QUkVESUNUGAMgASgBEhoKEnhhY2NSQVdJTVVfUFJFRElD",
            "VBgEIAEoARIaChJ5YWNjUkFXSU1VX1BSRURJQ1QYBSABKAESGgoSemFjY1JB",
            "V0lNVV9QUkVESUNUGAYgASgBEhsKE3hneXJvUkFXSU1VX1BSRURJQ1QYByAB",
            "KAESGwoTeWd5cm9SQVdJTVVfUFJFRElDVBgIIAEoARIbChN6Z3lyb1JBV0lN",
            "VV9QUkVESUNUGAkgASgBEhoKEnhtYWdSQVdJTVVfUFJFRElDVBgKIAEoARIa",
            "ChJ5bWFnUkFXSU1VX1BSRURJQ1QYCyABKAESGgoSem1hZ1JBV0lNVV9QUkVE",
            "SUNUGAwgASgBEiMKG3ZpYnJhdGlvblhWSUJSQVRJT05fUFJFRElDVBgNIAEo",
            "ARIjCht2aWJyYXRpb25ZVklCUkFUSU9OX1BSRURJQ1QYDiABKAESIwobdmli",
            "cmF0aW9uWlZJQlJBVElPTl9QUkVESUNUGA8gASgBIvADCg9HcnBjV2Fybmlu",
            "Z0RhdGESFQoNd2FybmluZ19jb3VudBgBIAEoBRIcChRyb2xsQVRUSVRVREVf",
            "V0FSTklORxgCIAEoCBIdChVwaXRjaEFUVElUVURFX1dBUk5JTkcYAyABKAgS",
            "GwoTeWF3QVRUSVRVREVfV0FSTklORxgEIAEoCBIaChJ4YWNjUkFXSU1VX1dB",
            "Uk5JTkcYBSABKAgSGgoSeWFjY1JBV0lNVV9XQVJOSU5HGAYgASgIEhoKEnph",
            "Y2NSQVdJTVVfV0FSTklORxgHIAEoCBIbChN4Z3lyb1JBV0lNVV9XQVJOSU5H",
            "GAggASgIEhsKE3lneXJvUkFXSU1VX1dBUk5JTkcYCSABKAgSGwoTemd5cm9S",
            "QVdJTVVfV0FSTklORxgKIAEoCBIaChJ4bWFnUkFXSU1VX1dBUk5JTkcYCyAB",
            "KAgSGgoSeW1hZ1JBV0lNVV9XQVJOSU5HGAwgASgIEhoKEnptYWdSQVdJTVVf",
            "V0FSTklORxgNIAEoCBIjCht2aWJyYXRpb25YVklCUkFUSU9OX1dBUk5JTkcY",
            "DiABKAgSIwobdmlicmF0aW9uWVZJQlJBVElPTl9XQVJOSU5HGA8gASgIEiMK",
            "G3ZpYnJhdGlvblpWSUJSQVRJT05fV0FSTklORxgQIAEoCDKGAQoRRHJvbmVT",
            "dGF0dXNVcGRhdGUScQoRVXBkYXRlRHJvbmVTdGF0dXMSMi5raXNhX2djc19z",
            "eXN0ZW0uU2VydmljZXMuVXBkYXRlRHJvbmVTdGF0dXNQYXlsb2FkGigua2lz",
            "YV9nY3Nfc3lzdGVtLlNlcnZpY2VzLlN0YXR1c1Jlc3BvbnNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.UpdateDroneStatusPayload), global::KisaGcsSystem.Services.UpdateDroneStatusPayload.Parser, new[]{ "DroneStatuses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.GrpcDroneStatus), global::KisaGcsSystem.Services.GrpcDroneStatus.Parser, new[]{ "DroneId", "FlightId", "IsOnline", "IsLanded", "ControllStt", "DroneStt", "SensorData" }, new[]{ "DroneId", "FlightId", "IsOnline", "IsLanded", "ControllStt", "DroneStt", "SensorData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.GrpcDroneStt), global::KisaGcsSystem.Services.GrpcDroneStt.Parser, new[]{ "PowerV", "BatteryStt", "GpsStt", "TempC", "Lat", "Lon", "Alt", "GlobalAlt", "Roll", "Pitch", "Head", "Speed", "HoverStt", "HDOP", "SatellitesCount", "FlightMode" }, new[]{ "PowerV", "BatteryStt", "GpsStt", "TempC", "Lat", "Lon", "Alt", "GlobalAlt", "Roll", "Pitch", "Head", "Speed", "HoverStt", "HDOP", "SatellitesCount", "FlightMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.GrpcSensorData), global::KisaGcsSystem.Services.GrpcSensorData.Parser, new[]{ "RollATTITUDE", "PitchATTITUDE", "YawATTITUDE", "XaccRAWIMU", "YaccRAWIMU", "ZaccRAWIMU", "XgyroRAWIMU", "YgyroRAWIMU", "ZgyroRAWIMU", "XmagRAWIMU", "YmagRAWIMU", "ZmagRAWIMU", "VibrationXVIBRATION", "VibrationYVIBRATION", "VibrationZVIBRATION", "AccelCalXSENSOROFFSETS", "AccelCalYSENSOROFFSETS", "AccelCalZSENSOROFFSETS", "MagOfsXSENSOROFFSETS", "MagOfsYSENSOROFFSETS", "VxGLOBALPOSITIONINT", "VyGLOBALPOSITIONINT", "XLOCALPOSITIONNED", "VxLOCALPOSITIONNED", "VyLOCALPOSITIONNED", "NavPitchNAVCONTROLLEROUTPUT", "NavBearingNAVCONTROLLEROUTPUT", "Servo3RawSERVOOUTPUTRAW", "Servo8RawSERVOOUTPUTRAW", "GroundspeedVFRHUD", "AirspeedVFRHUD", "PressAbsSCALEDPRESSURE", "VservoPOWERSTATUS", "Voltages1BATTERYSTATUS", "ChancountRCCHANNELS", "Chan12RawRCCHANNELS", "Chan13RawRCCHANNELS", "Chan14RawRCCHANNELS", "Chan15RawRCCHANNELS", "Chan16RawRCCHANNELS" }, new[]{ "RollATTITUDE", "PitchATTITUDE", "YawATTITUDE", "XaccRAWIMU", "YaccRAWIMU", "ZaccRAWIMU", "XgyroRAWIMU", "YgyroRAWIMU", "ZgyroRAWIMU", "XmagRAWIMU", "YmagRAWIMU", "ZmagRAWIMU", "VibrationXVIBRATION", "VibrationYVIBRATION", "VibrationZVIBRATION", "AccelCalXSENSOROFFSETS", "AccelCalYSENSOROFFSETS", "AccelCalZSENSOROFFSETS", "MagOfsXSENSOROFFSETS", "MagOfsYSENSOROFFSETS", "VxGLOBALPOSITIONINT", "VyGLOBALPOSITIONINT", "XLOCALPOSITIONNED", "VxLOCALPOSITIONNED", "VyLOCALPOSITIONNED", "NavPitchNAVCONTROLLEROUTPUT", "NavBearingNAVCONTROLLEROUTPUT", "Servo3RawSERVOOUTPUTRAW", "Servo8RawSERVOOUTPUTRAW", "GroundspeedVFRHUD", "AirspeedVFRHUD", "PressAbsSCALEDPRESSURE", "VservoPOWERSTATUS", "Voltages1BATTERYSTATUS", "ChancountRCCHANNELS", "Chan12RawRCCHANNELS", "Chan13RawRCCHANNELS", "Chan14RawRCCHANNELS", "Chan15RawRCCHANNELS", "Chan16RawRCCHANNELS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.StatusResponse), global::KisaGcsSystem.Services.StatusResponse.Parser, new[]{ "DroneId", "PredictData", "WarningData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.GrpcPredictData), global::KisaGcsSystem.Services.GrpcPredictData.Parser, new[]{ "RollATTITUDEPREDICT", "YawATTITUDEPREDICT", "PitchATTITUDEPREDICT", "XaccRAWIMUPREDICT", "YaccRAWIMUPREDICT", "ZaccRAWIMUPREDICT", "XgyroRAWIMUPREDICT", "YgyroRAWIMUPREDICT", "ZgyroRAWIMUPREDICT", "XmagRAWIMUPREDICT", "YmagRAWIMUPREDICT", "ZmagRAWIMUPREDICT", "VibrationXVIBRATIONPREDICT", "VibrationYVIBRATIONPREDICT", "VibrationZVIBRATIONPREDICT" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KisaGcsSystem.Services.GrpcWarningData), global::KisaGcsSystem.Services.GrpcWarningData.Parser, new[]{ "WarningCount", "RollATTITUDEWARNING", "PitchATTITUDEWARNING", "YawATTITUDEWARNING", "XaccRAWIMUWARNING", "YaccRAWIMUWARNING", "ZaccRAWIMUWARNING", "XgyroRAWIMUWARNING", "YgyroRAWIMUWARNING", "ZgyroRAWIMUWARNING", "XmagRAWIMUWARNING", "YmagRAWIMUWARNING", "ZmagRAWIMUWARNING", "VibrationXVIBRATIONWARNING", "VibrationYVIBRATIONWARNING", "VibrationZVIBRATIONWARNING" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UpdateDroneStatusPayload : pb::IMessage<UpdateDroneStatusPayload>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDroneStatusPayload> _parser = new pb::MessageParser<UpdateDroneStatusPayload>(() => new UpdateDroneStatusPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpdateDroneStatusPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateDroneStatusPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateDroneStatusPayload(UpdateDroneStatusPayload other) : this() {
      droneStatuses_ = other.droneStatuses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateDroneStatusPayload Clone() {
      return new UpdateDroneStatusPayload(this);
    }

    /// <summary>Field number for the "droneStatuses" field.</summary>
    public const int DroneStatusesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KisaGcsSystem.Services.GrpcDroneStatus> _repeated_droneStatuses_codec
        = pb::FieldCodec.ForMessage(10, global::KisaGcsSystem.Services.GrpcDroneStatus.Parser);
    private readonly pbc::RepeatedField<global::KisaGcsSystem.Services.GrpcDroneStatus> droneStatuses_ = new pbc::RepeatedField<global::KisaGcsSystem.Services.GrpcDroneStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::KisaGcsSystem.Services.GrpcDroneStatus> DroneStatuses {
      get { return droneStatuses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UpdateDroneStatusPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpdateDroneStatusPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!droneStatuses_.Equals(other.droneStatuses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= droneStatuses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      droneStatuses_.WriteTo(output, _repeated_droneStatuses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      droneStatuses_.WriteTo(ref output, _repeated_droneStatuses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += droneStatuses_.CalculateSize(_repeated_droneStatuses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpdateDroneStatusPayload other) {
      if (other == null) {
        return;
      }
      droneStatuses_.Add(other.droneStatuses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            droneStatuses_.AddEntriesFrom(input, _repeated_droneStatuses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            droneStatuses_.AddEntriesFrom(ref input, _repeated_droneStatuses_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GrpcDroneStatus : pb::IMessage<GrpcDroneStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrpcDroneStatus> _parser = new pb::MessageParser<GrpcDroneStatus>(() => new GrpcDroneStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GrpcDroneStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcDroneStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcDroneStatus(GrpcDroneStatus other) : this() {
      _hasBits0 = other._hasBits0;
      droneId_ = other.droneId_;
      flightId_ = other.flightId_;
      isOnline_ = other.isOnline_;
      isLanded_ = other.isLanded_;
      controllStt_ = other.controllStt_;
      droneStt_ = other.droneStt_ != null ? other.droneStt_.Clone() : null;
      sensorData_ = other.sensorData_ != null ? other.sensorData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcDroneStatus Clone() {
      return new GrpcDroneStatus(this);
    }

    /// <summary>Field number for the "DroneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private string droneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DroneId {
      get { return droneId_ ?? ""; }
      set {
        droneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "DroneId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDroneId {
      get { return droneId_ != null; }
    }
    /// <summary>Clears the value of the "DroneId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDroneId() {
      droneId_ = null;
    }

    /// <summary>Field number for the "FlightId" field.</summary>
    public const int FlightIdFieldNumber = 2;
    private string flightId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FlightId {
      get { return flightId_ ?? ""; }
      set {
        flightId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "FlightId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlightId {
      get { return flightId_ != null; }
    }
    /// <summary>Clears the value of the "FlightId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlightId() {
      flightId_ = null;
    }

    /// <summary>Field number for the "IsOnline" field.</summary>
    public const int IsOnlineFieldNumber = 3;
    private bool isOnline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOnline {
      get { if ((_hasBits0 & 1) != 0) { return isOnline_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        isOnline_ = value;
      }
    }
    /// <summary>Gets whether the "IsOnline" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOnline {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsOnline" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOnline() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsLanded" field.</summary>
    public const int IsLandedFieldNumber = 4;
    private bool isLanded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLanded {
      get { if ((_hasBits0 & 2) != 0) { return isLanded_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        isLanded_ = value;
      }
    }
    /// <summary>Gets whether the "IsLanded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLanded {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsLanded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLanded() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ControllStt" field.</summary>
    public const int ControllSttFieldNumber = 5;
    private string controllStt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ControllStt {
      get { return controllStt_ ?? ""; }
      set {
        controllStt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ControllStt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControllStt {
      get { return controllStt_ != null; }
    }
    /// <summary>Clears the value of the "ControllStt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControllStt() {
      controllStt_ = null;
    }

    /// <summary>Field number for the "DroneStt" field.</summary>
    public const int DroneSttFieldNumber = 6;
    private global::KisaGcsSystem.Services.GrpcDroneStt droneStt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::KisaGcsSystem.Services.GrpcDroneStt DroneStt {
      get { return droneStt_; }
      set {
        droneStt_ = value;
      }
    }

    /// <summary>Field number for the "SensorData" field.</summary>
    public const int SensorDataFieldNumber = 7;
    private global::KisaGcsSystem.Services.GrpcSensorData sensorData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::KisaGcsSystem.Services.GrpcSensorData SensorData {
      get { return sensorData_; }
      set {
        sensorData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GrpcDroneStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GrpcDroneStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      if (FlightId != other.FlightId) return false;
      if (IsOnline != other.IsOnline) return false;
      if (IsLanded != other.IsLanded) return false;
      if (ControllStt != other.ControllStt) return false;
      if (!object.Equals(DroneStt, other.DroneStt)) return false;
      if (!object.Equals(SensorData, other.SensorData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDroneId) hash ^= DroneId.GetHashCode();
      if (HasFlightId) hash ^= FlightId.GetHashCode();
      if (HasIsOnline) hash ^= IsOnline.GetHashCode();
      if (HasIsLanded) hash ^= IsLanded.GetHashCode();
      if (HasControllStt) hash ^= ControllStt.GetHashCode();
      if (droneStt_ != null) hash ^= DroneStt.GetHashCode();
      if (sensorData_ != null) hash ^= SensorData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDroneId) {
        output.WriteRawTag(10);
        output.WriteString(DroneId);
      }
      if (HasFlightId) {
        output.WriteRawTag(18);
        output.WriteString(FlightId);
      }
      if (HasIsOnline) {
        output.WriteRawTag(24);
        output.WriteBool(IsOnline);
      }
      if (HasIsLanded) {
        output.WriteRawTag(32);
        output.WriteBool(IsLanded);
      }
      if (HasControllStt) {
        output.WriteRawTag(42);
        output.WriteString(ControllStt);
      }
      if (droneStt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DroneStt);
      }
      if (sensorData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SensorData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDroneId) {
        output.WriteRawTag(10);
        output.WriteString(DroneId);
      }
      if (HasFlightId) {
        output.WriteRawTag(18);
        output.WriteString(FlightId);
      }
      if (HasIsOnline) {
        output.WriteRawTag(24);
        output.WriteBool(IsOnline);
      }
      if (HasIsLanded) {
        output.WriteRawTag(32);
        output.WriteBool(IsLanded);
      }
      if (HasControllStt) {
        output.WriteRawTag(42);
        output.WriteString(ControllStt);
      }
      if (droneStt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DroneStt);
      }
      if (sensorData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SensorData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDroneId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DroneId);
      }
      if (HasFlightId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlightId);
      }
      if (HasIsOnline) {
        size += 1 + 1;
      }
      if (HasIsLanded) {
        size += 1 + 1;
      }
      if (HasControllStt) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ControllStt);
      }
      if (droneStt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DroneStt);
      }
      if (sensorData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GrpcDroneStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasDroneId) {
        DroneId = other.DroneId;
      }
      if (other.HasFlightId) {
        FlightId = other.FlightId;
      }
      if (other.HasIsOnline) {
        IsOnline = other.IsOnline;
      }
      if (other.HasIsLanded) {
        IsLanded = other.IsLanded;
      }
      if (other.HasControllStt) {
        ControllStt = other.ControllStt;
      }
      if (other.droneStt_ != null) {
        if (droneStt_ == null) {
          DroneStt = new global::KisaGcsSystem.Services.GrpcDroneStt();
        }
        DroneStt.MergeFrom(other.DroneStt);
      }
      if (other.sensorData_ != null) {
        if (sensorData_ == null) {
          SensorData = new global::KisaGcsSystem.Services.GrpcSensorData();
        }
        SensorData.MergeFrom(other.SensorData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DroneId = input.ReadString();
            break;
          }
          case 18: {
            FlightId = input.ReadString();
            break;
          }
          case 24: {
            IsOnline = input.ReadBool();
            break;
          }
          case 32: {
            IsLanded = input.ReadBool();
            break;
          }
          case 42: {
            ControllStt = input.ReadString();
            break;
          }
          case 50: {
            if (droneStt_ == null) {
              DroneStt = new global::KisaGcsSystem.Services.GrpcDroneStt();
            }
            input.ReadMessage(DroneStt);
            break;
          }
          case 58: {
            if (sensorData_ == null) {
              SensorData = new global::KisaGcsSystem.Services.GrpcSensorData();
            }
            input.ReadMessage(SensorData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DroneId = input.ReadString();
            break;
          }
          case 18: {
            FlightId = input.ReadString();
            break;
          }
          case 24: {
            IsOnline = input.ReadBool();
            break;
          }
          case 32: {
            IsLanded = input.ReadBool();
            break;
          }
          case 42: {
            ControllStt = input.ReadString();
            break;
          }
          case 50: {
            if (droneStt_ == null) {
              DroneStt = new global::KisaGcsSystem.Services.GrpcDroneStt();
            }
            input.ReadMessage(DroneStt);
            break;
          }
          case 58: {
            if (sensorData_ == null) {
              SensorData = new global::KisaGcsSystem.Services.GrpcSensorData();
            }
            input.ReadMessage(SensorData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GrpcDroneStt : pb::IMessage<GrpcDroneStt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrpcDroneStt> _parser = new pb::MessageParser<GrpcDroneStt>(() => new GrpcDroneStt());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GrpcDroneStt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcDroneStt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcDroneStt(GrpcDroneStt other) : this() {
      _hasBits0 = other._hasBits0;
      powerV_ = other.powerV_;
      batteryStt_ = other.batteryStt_;
      gpsStt_ = other.gpsStt_;
      tempC_ = other.tempC_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      globalAlt_ = other.globalAlt_;
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      head_ = other.head_;
      speed_ = other.speed_;
      hoverStt_ = other.hoverStt_;
      hDOP_ = other.hDOP_;
      satellitesCount_ = other.satellitesCount_;
      flightMode_ = other.flightMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcDroneStt Clone() {
      return new GrpcDroneStt(this);
    }

    /// <summary>Field number for the "PowerV" field.</summary>
    public const int PowerVFieldNumber = 1;
    private float powerV_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PowerV {
      get { if ((_hasBits0 & 1) != 0) { return powerV_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        powerV_ = value;
      }
    }
    /// <summary>Gets whether the "PowerV" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPowerV {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "PowerV" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPowerV() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "BatteryStt" field.</summary>
    public const int BatterySttFieldNumber = 2;
    private int batteryStt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BatteryStt {
      get { if ((_hasBits0 & 2) != 0) { return batteryStt_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        batteryStt_ = value;
      }
    }
    /// <summary>Gets whether the "BatteryStt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBatteryStt {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "BatteryStt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBatteryStt() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GpsStt" field.</summary>
    public const int GpsSttFieldNumber = 3;
    private string gpsStt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GpsStt {
      get { return gpsStt_ ?? ""; }
      set {
        gpsStt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "GpsStt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpsStt {
      get { return gpsStt_ != null; }
    }
    /// <summary>Clears the value of the "GpsStt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpsStt() {
      gpsStt_ = null;
    }

    /// <summary>Field number for the "TempC" field.</summary>
    public const int TempCFieldNumber = 4;
    private double tempC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TempC {
      get { if ((_hasBits0 & 4) != 0) { return tempC_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        tempC_ = value;
      }
    }
    /// <summary>Gets whether the "TempC" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTempC {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "TempC" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTempC() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Lat" field.</summary>
    public const int LatFieldNumber = 5;
    private double lat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lat {
      get { if ((_hasBits0 & 8) != 0) { return lat_; } else { return 0D; } }
      set {
        _hasBits0 |= 8;
        lat_ = value;
      }
    }
    /// <summary>Gets whether the "Lat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLat {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Lat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLat() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Lon" field.</summary>
    public const int LonFieldNumber = 6;
    private double lon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lon {
      get { if ((_hasBits0 & 16) != 0) { return lon_; } else { return 0D; } }
      set {
        _hasBits0 |= 16;
        lon_ = value;
      }
    }
    /// <summary>Gets whether the "Lon" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLon {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "Lon" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLon() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "Alt" field.</summary>
    public const int AltFieldNumber = 7;
    private double alt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Alt {
      get { if ((_hasBits0 & 32) != 0) { return alt_; } else { return 0D; } }
      set {
        _hasBits0 |= 32;
        alt_ = value;
      }
    }
    /// <summary>Gets whether the "Alt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlt {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "Alt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlt() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "GlobalAlt" field.</summary>
    public const int GlobalAltFieldNumber = 8;
    private double globalAlt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GlobalAlt {
      get { if ((_hasBits0 & 64) != 0) { return globalAlt_; } else { return 0D; } }
      set {
        _hasBits0 |= 64;
        globalAlt_ = value;
      }
    }
    /// <summary>Gets whether the "GlobalAlt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGlobalAlt {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "GlobalAlt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGlobalAlt() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "Roll" field.</summary>
    public const int RollFieldNumber = 9;
    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Roll {
      get { if ((_hasBits0 & 128) != 0) { return roll_; } else { return 0D; } }
      set {
        _hasBits0 |= 128;
        roll_ = value;
      }
    }
    /// <summary>Gets whether the "Roll" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRoll {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "Roll" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRoll() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "Pitch" field.</summary>
    public const int PitchFieldNumber = 10;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Pitch {
      get { if ((_hasBits0 & 256) != 0) { return pitch_; } else { return 0D; } }
      set {
        _hasBits0 |= 256;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "Pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitch {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "Pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitch() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 11;
    private int head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Head {
      get { if ((_hasBits0 & 512) != 0) { return head_; } else { return 0; } }
      set {
        _hasBits0 |= 512;
        head_ = value;
      }
    }
    /// <summary>Gets whether the "Head" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHead {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "Head" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHead() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 12;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Speed {
      get { if ((_hasBits0 & 1024) != 0) { return speed_; } else { return 0F; } }
      set {
        _hasBits0 |= 1024;
        speed_ = value;
      }
    }
    /// <summary>Gets whether the "Speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpeed {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "Speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpeed() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "HoverStt" field.</summary>
    public const int HoverSttFieldNumber = 13;
    private string hoverStt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HoverStt {
      get { return hoverStt_ ?? ""; }
      set {
        hoverStt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "HoverStt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHoverStt {
      get { return hoverStt_ != null; }
    }
    /// <summary>Clears the value of the "HoverStt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHoverStt() {
      hoverStt_ = null;
    }

    /// <summary>Field number for the "HDOP" field.</summary>
    public const int HDOPFieldNumber = 14;
    private double hDOP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double HDOP {
      get { if ((_hasBits0 & 2048) != 0) { return hDOP_; } else { return 0D; } }
      set {
        _hasBits0 |= 2048;
        hDOP_ = value;
      }
    }
    /// <summary>Gets whether the "HDOP" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHDOP {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "HDOP" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHDOP() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "SatellitesCount" field.</summary>
    public const int SatellitesCountFieldNumber = 15;
    private int satellitesCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SatellitesCount {
      get { if ((_hasBits0 & 4096) != 0) { return satellitesCount_; } else { return 0; } }
      set {
        _hasBits0 |= 4096;
        satellitesCount_ = value;
      }
    }
    /// <summary>Gets whether the "SatellitesCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSatellitesCount {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "SatellitesCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSatellitesCount() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "FlightMode" field.</summary>
    public const int FlightModeFieldNumber = 16;
    private int flightMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FlightMode {
      get { if ((_hasBits0 & 8192) != 0) { return flightMode_; } else { return 0; } }
      set {
        _hasBits0 |= 8192;
        flightMode_ = value;
      }
    }
    /// <summary>Gets whether the "FlightMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlightMode {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "FlightMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlightMode() {
      _hasBits0 &= ~8192;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GrpcDroneStt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GrpcDroneStt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PowerV, other.PowerV)) return false;
      if (BatteryStt != other.BatteryStt) return false;
      if (GpsStt != other.GpsStt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TempC, other.TempC)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alt, other.Alt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GlobalAlt, other.GlobalAlt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (Head != other.Head) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (HoverStt != other.HoverStt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HDOP, other.HDOP)) return false;
      if (SatellitesCount != other.SatellitesCount) return false;
      if (FlightMode != other.FlightMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPowerV) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PowerV);
      if (HasBatteryStt) hash ^= BatteryStt.GetHashCode();
      if (HasGpsStt) hash ^= GpsStt.GetHashCode();
      if (HasTempC) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TempC);
      if (HasLat) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (HasLon) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (HasAlt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alt);
      if (HasGlobalAlt) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GlobalAlt);
      if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (HasHead) hash ^= Head.GetHashCode();
      if (HasSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (HasHoverStt) hash ^= HoverStt.GetHashCode();
      if (HasHDOP) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HDOP);
      if (HasSatellitesCount) hash ^= SatellitesCount.GetHashCode();
      if (HasFlightMode) hash ^= FlightMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPowerV) {
        output.WriteRawTag(13);
        output.WriteFloat(PowerV);
      }
      if (HasBatteryStt) {
        output.WriteRawTag(16);
        output.WriteSInt32(BatteryStt);
      }
      if (HasGpsStt) {
        output.WriteRawTag(26);
        output.WriteString(GpsStt);
      }
      if (HasTempC) {
        output.WriteRawTag(33);
        output.WriteDouble(TempC);
      }
      if (HasLat) {
        output.WriteRawTag(41);
        output.WriteDouble(Lat);
      }
      if (HasLon) {
        output.WriteRawTag(49);
        output.WriteDouble(Lon);
      }
      if (HasAlt) {
        output.WriteRawTag(57);
        output.WriteDouble(Alt);
      }
      if (HasGlobalAlt) {
        output.WriteRawTag(65);
        output.WriteDouble(GlobalAlt);
      }
      if (HasRoll) {
        output.WriteRawTag(73);
        output.WriteDouble(Roll);
      }
      if (HasPitch) {
        output.WriteRawTag(81);
        output.WriteDouble(Pitch);
      }
      if (HasHead) {
        output.WriteRawTag(88);
        output.WriteInt32(Head);
      }
      if (HasSpeed) {
        output.WriteRawTag(101);
        output.WriteFloat(Speed);
      }
      if (HasHoverStt) {
        output.WriteRawTag(106);
        output.WriteString(HoverStt);
      }
      if (HasHDOP) {
        output.WriteRawTag(113);
        output.WriteDouble(HDOP);
      }
      if (HasSatellitesCount) {
        output.WriteRawTag(120);
        output.WriteInt32(SatellitesCount);
      }
      if (HasFlightMode) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(FlightMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPowerV) {
        output.WriteRawTag(13);
        output.WriteFloat(PowerV);
      }
      if (HasBatteryStt) {
        output.WriteRawTag(16);
        output.WriteSInt32(BatteryStt);
      }
      if (HasGpsStt) {
        output.WriteRawTag(26);
        output.WriteString(GpsStt);
      }
      if (HasTempC) {
        output.WriteRawTag(33);
        output.WriteDouble(TempC);
      }
      if (HasLat) {
        output.WriteRawTag(41);
        output.WriteDouble(Lat);
      }
      if (HasLon) {
        output.WriteRawTag(49);
        output.WriteDouble(Lon);
      }
      if (HasAlt) {
        output.WriteRawTag(57);
        output.WriteDouble(Alt);
      }
      if (HasGlobalAlt) {
        output.WriteRawTag(65);
        output.WriteDouble(GlobalAlt);
      }
      if (HasRoll) {
        output.WriteRawTag(73);
        output.WriteDouble(Roll);
      }
      if (HasPitch) {
        output.WriteRawTag(81);
        output.WriteDouble(Pitch);
      }
      if (HasHead) {
        output.WriteRawTag(88);
        output.WriteInt32(Head);
      }
      if (HasSpeed) {
        output.WriteRawTag(101);
        output.WriteFloat(Speed);
      }
      if (HasHoverStt) {
        output.WriteRawTag(106);
        output.WriteString(HoverStt);
      }
      if (HasHDOP) {
        output.WriteRawTag(113);
        output.WriteDouble(HDOP);
      }
      if (HasSatellitesCount) {
        output.WriteRawTag(120);
        output.WriteInt32(SatellitesCount);
      }
      if (HasFlightMode) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(FlightMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPowerV) {
        size += 1 + 4;
      }
      if (HasBatteryStt) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BatteryStt);
      }
      if (HasGpsStt) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GpsStt);
      }
      if (HasTempC) {
        size += 1 + 8;
      }
      if (HasLat) {
        size += 1 + 8;
      }
      if (HasLon) {
        size += 1 + 8;
      }
      if (HasAlt) {
        size += 1 + 8;
      }
      if (HasGlobalAlt) {
        size += 1 + 8;
      }
      if (HasRoll) {
        size += 1 + 8;
      }
      if (HasPitch) {
        size += 1 + 8;
      }
      if (HasHead) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (HasSpeed) {
        size += 1 + 4;
      }
      if (HasHoverStt) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HoverStt);
      }
      if (HasHDOP) {
        size += 1 + 8;
      }
      if (HasSatellitesCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SatellitesCount);
      }
      if (HasFlightMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FlightMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GrpcDroneStt other) {
      if (other == null) {
        return;
      }
      if (other.HasPowerV) {
        PowerV = other.PowerV;
      }
      if (other.HasBatteryStt) {
        BatteryStt = other.BatteryStt;
      }
      if (other.HasGpsStt) {
        GpsStt = other.GpsStt;
      }
      if (other.HasTempC) {
        TempC = other.TempC;
      }
      if (other.HasLat) {
        Lat = other.Lat;
      }
      if (other.HasLon) {
        Lon = other.Lon;
      }
      if (other.HasAlt) {
        Alt = other.Alt;
      }
      if (other.HasGlobalAlt) {
        GlobalAlt = other.GlobalAlt;
      }
      if (other.HasRoll) {
        Roll = other.Roll;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasHead) {
        Head = other.Head;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      if (other.HasHoverStt) {
        HoverStt = other.HoverStt;
      }
      if (other.HasHDOP) {
        HDOP = other.HDOP;
      }
      if (other.HasSatellitesCount) {
        SatellitesCount = other.SatellitesCount;
      }
      if (other.HasFlightMode) {
        FlightMode = other.FlightMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PowerV = input.ReadFloat();
            break;
          }
          case 16: {
            BatteryStt = input.ReadSInt32();
            break;
          }
          case 26: {
            GpsStt = input.ReadString();
            break;
          }
          case 33: {
            TempC = input.ReadDouble();
            break;
          }
          case 41: {
            Lat = input.ReadDouble();
            break;
          }
          case 49: {
            Lon = input.ReadDouble();
            break;
          }
          case 57: {
            Alt = input.ReadDouble();
            break;
          }
          case 65: {
            GlobalAlt = input.ReadDouble();
            break;
          }
          case 73: {
            Roll = input.ReadDouble();
            break;
          }
          case 81: {
            Pitch = input.ReadDouble();
            break;
          }
          case 88: {
            Head = input.ReadInt32();
            break;
          }
          case 101: {
            Speed = input.ReadFloat();
            break;
          }
          case 106: {
            HoverStt = input.ReadString();
            break;
          }
          case 113: {
            HDOP = input.ReadDouble();
            break;
          }
          case 120: {
            SatellitesCount = input.ReadInt32();
            break;
          }
          case 128: {
            FlightMode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            PowerV = input.ReadFloat();
            break;
          }
          case 16: {
            BatteryStt = input.ReadSInt32();
            break;
          }
          case 26: {
            GpsStt = input.ReadString();
            break;
          }
          case 33: {
            TempC = input.ReadDouble();
            break;
          }
          case 41: {
            Lat = input.ReadDouble();
            break;
          }
          case 49: {
            Lon = input.ReadDouble();
            break;
          }
          case 57: {
            Alt = input.ReadDouble();
            break;
          }
          case 65: {
            GlobalAlt = input.ReadDouble();
            break;
          }
          case 73: {
            Roll = input.ReadDouble();
            break;
          }
          case 81: {
            Pitch = input.ReadDouble();
            break;
          }
          case 88: {
            Head = input.ReadInt32();
            break;
          }
          case 101: {
            Speed = input.ReadFloat();
            break;
          }
          case 106: {
            HoverStt = input.ReadString();
            break;
          }
          case 113: {
            HDOP = input.ReadDouble();
            break;
          }
          case 120: {
            SatellitesCount = input.ReadInt32();
            break;
          }
          case 128: {
            FlightMode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GrpcSensorData : pb::IMessage<GrpcSensorData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrpcSensorData> _parser = new pb::MessageParser<GrpcSensorData>(() => new GrpcSensorData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GrpcSensorData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcSensorData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcSensorData(GrpcSensorData other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      rollATTITUDE_ = other.rollATTITUDE_;
      pitchATTITUDE_ = other.pitchATTITUDE_;
      yawATTITUDE_ = other.yawATTITUDE_;
      xaccRAWIMU_ = other.xaccRAWIMU_;
      yaccRAWIMU_ = other.yaccRAWIMU_;
      zaccRAWIMU_ = other.zaccRAWIMU_;
      xgyroRAWIMU_ = other.xgyroRAWIMU_;
      ygyroRAWIMU_ = other.ygyroRAWIMU_;
      zgyroRAWIMU_ = other.zgyroRAWIMU_;
      xmagRAWIMU_ = other.xmagRAWIMU_;
      ymagRAWIMU_ = other.ymagRAWIMU_;
      zmagRAWIMU_ = other.zmagRAWIMU_;
      vibrationXVIBRATION_ = other.vibrationXVIBRATION_;
      vibrationYVIBRATION_ = other.vibrationYVIBRATION_;
      vibrationZVIBRATION_ = other.vibrationZVIBRATION_;
      accelCalXSENSOROFFSETS_ = other.accelCalXSENSOROFFSETS_;
      accelCalYSENSOROFFSETS_ = other.accelCalYSENSOROFFSETS_;
      accelCalZSENSOROFFSETS_ = other.accelCalZSENSOROFFSETS_;
      magOfsXSENSOROFFSETS_ = other.magOfsXSENSOROFFSETS_;
      magOfsYSENSOROFFSETS_ = other.magOfsYSENSOROFFSETS_;
      vxGLOBALPOSITIONINT_ = other.vxGLOBALPOSITIONINT_;
      vyGLOBALPOSITIONINT_ = other.vyGLOBALPOSITIONINT_;
      xLOCALPOSITIONNED_ = other.xLOCALPOSITIONNED_;
      vxLOCALPOSITIONNED_ = other.vxLOCALPOSITIONNED_;
      vyLOCALPOSITIONNED_ = other.vyLOCALPOSITIONNED_;
      navPitchNAVCONTROLLEROUTPUT_ = other.navPitchNAVCONTROLLEROUTPUT_;
      navBearingNAVCONTROLLEROUTPUT_ = other.navBearingNAVCONTROLLEROUTPUT_;
      servo3RawSERVOOUTPUTRAW_ = other.servo3RawSERVOOUTPUTRAW_;
      servo8RawSERVOOUTPUTRAW_ = other.servo8RawSERVOOUTPUTRAW_;
      groundspeedVFRHUD_ = other.groundspeedVFRHUD_;
      airspeedVFRHUD_ = other.airspeedVFRHUD_;
      pressAbsSCALEDPRESSURE_ = other.pressAbsSCALEDPRESSURE_;
      vservoPOWERSTATUS_ = other.vservoPOWERSTATUS_;
      voltages1BATTERYSTATUS_ = other.voltages1BATTERYSTATUS_;
      chancountRCCHANNELS_ = other.chancountRCCHANNELS_;
      chan12RawRCCHANNELS_ = other.chan12RawRCCHANNELS_;
      chan13RawRCCHANNELS_ = other.chan13RawRCCHANNELS_;
      chan14RawRCCHANNELS_ = other.chan14RawRCCHANNELS_;
      chan15RawRCCHANNELS_ = other.chan15RawRCCHANNELS_;
      chan16RawRCCHANNELS_ = other.chan16RawRCCHANNELS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcSensorData Clone() {
      return new GrpcSensorData(this);
    }

    /// <summary>Field number for the "roll_ATTITUDE" field.</summary>
    public const int RollATTITUDEFieldNumber = 1;
    private float rollATTITUDE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RollATTITUDE {
      get { if ((_hasBits0 & 1) != 0) { return rollATTITUDE_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        rollATTITUDE_ = value;
      }
    }
    /// <summary>Gets whether the "roll_ATTITUDE" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRollATTITUDE {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "roll_ATTITUDE" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRollATTITUDE() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pitch_ATTITUDE" field.</summary>
    public const int PitchATTITUDEFieldNumber = 2;
    private float pitchATTITUDE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PitchATTITUDE {
      get { if ((_hasBits0 & 2) != 0) { return pitchATTITUDE_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        pitchATTITUDE_ = value;
      }
    }
    /// <summary>Gets whether the "pitch_ATTITUDE" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitchATTITUDE {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pitch_ATTITUDE" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitchATTITUDE() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "yaw_ATTITUDE" field.</summary>
    public const int YawATTITUDEFieldNumber = 3;
    private float yawATTITUDE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YawATTITUDE {
      get { if ((_hasBits0 & 4) != 0) { return yawATTITUDE_; } else { return 0F; } }
      set {
        _hasBits0 |= 4;
        yawATTITUDE_ = value;
      }
    }
    /// <summary>Gets whether the "yaw_ATTITUDE" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYawATTITUDE {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "yaw_ATTITUDE" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYawATTITUDE() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "xacc_RAW_IMU" field.</summary>
    public const int XaccRAWIMUFieldNumber = 4;
    private int xaccRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int XaccRAWIMU {
      get { if ((_hasBits0 & 8) != 0) { return xaccRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        xaccRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "xacc_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasXaccRAWIMU {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "xacc_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearXaccRAWIMU() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "yacc_RAW_IMU" field.</summary>
    public const int YaccRAWIMUFieldNumber = 5;
    private int yaccRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int YaccRAWIMU {
      get { if ((_hasBits0 & 16) != 0) { return yaccRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        yaccRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "yacc_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYaccRAWIMU {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "yacc_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYaccRAWIMU() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "zacc_RAW_IMU" field.</summary>
    public const int ZaccRAWIMUFieldNumber = 6;
    private int zaccRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ZaccRAWIMU {
      get { if ((_hasBits0 & 32) != 0) { return zaccRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        zaccRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "zacc_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZaccRAWIMU {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "zacc_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZaccRAWIMU() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "xgyro_RAW_IMU" field.</summary>
    public const int XgyroRAWIMUFieldNumber = 7;
    private int xgyroRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int XgyroRAWIMU {
      get { if ((_hasBits0 & 64) != 0) { return xgyroRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 64;
        xgyroRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "xgyro_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasXgyroRAWIMU {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "xgyro_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearXgyroRAWIMU() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ygyro_RAW_IMU" field.</summary>
    public const int YgyroRAWIMUFieldNumber = 8;
    private int ygyroRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int YgyroRAWIMU {
      get { if ((_hasBits0 & 128) != 0) { return ygyroRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        ygyroRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "ygyro_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYgyroRAWIMU {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "ygyro_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYgyroRAWIMU() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "zgyro_RAW_IMU" field.</summary>
    public const int ZgyroRAWIMUFieldNumber = 9;
    private int zgyroRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ZgyroRAWIMU {
      get { if ((_hasBits0 & 256) != 0) { return zgyroRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        zgyroRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "zgyro_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZgyroRAWIMU {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "zgyro_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZgyroRAWIMU() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "xmag_RAW_IMU" field.</summary>
    public const int XmagRAWIMUFieldNumber = 10;
    private int xmagRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int XmagRAWIMU {
      get { if ((_hasBits0 & 512) != 0) { return xmagRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 512;
        xmagRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "xmag_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasXmagRAWIMU {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "xmag_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearXmagRAWIMU() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ymag_RAW_IMU" field.</summary>
    public const int YmagRAWIMUFieldNumber = 11;
    private int ymagRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int YmagRAWIMU {
      get { if ((_hasBits0 & 1024) != 0) { return ymagRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 1024;
        ymagRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "ymag_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYmagRAWIMU {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ymag_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYmagRAWIMU() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "zmag_RAW_IMU" field.</summary>
    public const int ZmagRAWIMUFieldNumber = 12;
    private int zmagRAWIMU_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ZmagRAWIMU {
      get { if ((_hasBits0 & 2048) != 0) { return zmagRAWIMU_; } else { return 0; } }
      set {
        _hasBits0 |= 2048;
        zmagRAWIMU_ = value;
      }
    }
    /// <summary>Gets whether the "zmag_RAW_IMU" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZmagRAWIMU {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "zmag_RAW_IMU" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZmagRAWIMU() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "vibration_x_VIBRATION" field.</summary>
    public const int VibrationXVIBRATIONFieldNumber = 13;
    private float vibrationXVIBRATION_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VibrationXVIBRATION {
      get { if ((_hasBits0 & 4096) != 0) { return vibrationXVIBRATION_; } else { return 0F; } }
      set {
        _hasBits0 |= 4096;
        vibrationXVIBRATION_ = value;
      }
    }
    /// <summary>Gets whether the "vibration_x_VIBRATION" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVibrationXVIBRATION {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "vibration_x_VIBRATION" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVibrationXVIBRATION() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "vibration_y_VIBRATION" field.</summary>
    public const int VibrationYVIBRATIONFieldNumber = 14;
    private float vibrationYVIBRATION_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VibrationYVIBRATION {
      get { if ((_hasBits0 & 8192) != 0) { return vibrationYVIBRATION_; } else { return 0F; } }
      set {
        _hasBits0 |= 8192;
        vibrationYVIBRATION_ = value;
      }
    }
    /// <summary>Gets whether the "vibration_y_VIBRATION" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVibrationYVIBRATION {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "vibration_y_VIBRATION" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVibrationYVIBRATION() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "vibration_z_VIBRATION" field.</summary>
    public const int VibrationZVIBRATIONFieldNumber = 15;
    private float vibrationZVIBRATION_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VibrationZVIBRATION {
      get { if ((_hasBits0 & 16384) != 0) { return vibrationZVIBRATION_; } else { return 0F; } }
      set {
        _hasBits0 |= 16384;
        vibrationZVIBRATION_ = value;
      }
    }
    /// <summary>Gets whether the "vibration_z_VIBRATION" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVibrationZVIBRATION {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "vibration_z_VIBRATION" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVibrationZVIBRATION() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "accel_cal_x_SENSOR_OFFSETS" field.</summary>
    public const int AccelCalXSENSOROFFSETSFieldNumber = 16;
    private float accelCalXSENSOROFFSETS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccelCalXSENSOROFFSETS {
      get { if ((_hasBits0 & 32768) != 0) { return accelCalXSENSOROFFSETS_; } else { return 0F; } }
      set {
        _hasBits0 |= 32768;
        accelCalXSENSOROFFSETS_ = value;
      }
    }
    /// <summary>Gets whether the "accel_cal_x_SENSOR_OFFSETS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccelCalXSENSOROFFSETS {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "accel_cal_x_SENSOR_OFFSETS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccelCalXSENSOROFFSETS() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "accel_cal_y_SENSOR_OFFSETS" field.</summary>
    public const int AccelCalYSENSOROFFSETSFieldNumber = 17;
    private float accelCalYSENSOROFFSETS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccelCalYSENSOROFFSETS {
      get { if ((_hasBits0 & 65536) != 0) { return accelCalYSENSOROFFSETS_; } else { return 0F; } }
      set {
        _hasBits0 |= 65536;
        accelCalYSENSOROFFSETS_ = value;
      }
    }
    /// <summary>Gets whether the "accel_cal_y_SENSOR_OFFSETS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccelCalYSENSOROFFSETS {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "accel_cal_y_SENSOR_OFFSETS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccelCalYSENSOROFFSETS() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "accel_cal_z_SENSOR_OFFSETS" field.</summary>
    public const int AccelCalZSENSOROFFSETSFieldNumber = 18;
    private float accelCalZSENSOROFFSETS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AccelCalZSENSOROFFSETS {
      get { if ((_hasBits0 & 131072) != 0) { return accelCalZSENSOROFFSETS_; } else { return 0F; } }
      set {
        _hasBits0 |= 131072;
        accelCalZSENSOROFFSETS_ = value;
      }
    }
    /// <summary>Gets whether the "accel_cal_z_SENSOR_OFFSETS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccelCalZSENSOROFFSETS {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "accel_cal_z_SENSOR_OFFSETS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccelCalZSENSOROFFSETS() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "mag_ofs_x_SENSOR_OFFSETS" field.</summary>
    public const int MagOfsXSENSOROFFSETSFieldNumber = 19;
    private int magOfsXSENSOROFFSETS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MagOfsXSENSOROFFSETS {
      get { if ((_hasBits0 & 262144) != 0) { return magOfsXSENSOROFFSETS_; } else { return 0; } }
      set {
        _hasBits0 |= 262144;
        magOfsXSENSOROFFSETS_ = value;
      }
    }
    /// <summary>Gets whether the "mag_ofs_x_SENSOR_OFFSETS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMagOfsXSENSOROFFSETS {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "mag_ofs_x_SENSOR_OFFSETS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMagOfsXSENSOROFFSETS() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "mag_ofs_y_SENSOR_OFFSETS" field.</summary>
    public const int MagOfsYSENSOROFFSETSFieldNumber = 20;
    private int magOfsYSENSOROFFSETS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MagOfsYSENSOROFFSETS {
      get { if ((_hasBits0 & 524288) != 0) { return magOfsYSENSOROFFSETS_; } else { return 0; } }
      set {
        _hasBits0 |= 524288;
        magOfsYSENSOROFFSETS_ = value;
      }
    }
    /// <summary>Gets whether the "mag_ofs_y_SENSOR_OFFSETS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMagOfsYSENSOROFFSETS {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "mag_ofs_y_SENSOR_OFFSETS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMagOfsYSENSOROFFSETS() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "vx_GLOBAL_POSITION_INT" field.</summary>
    public const int VxGLOBALPOSITIONINTFieldNumber = 21;
    private int vxGLOBALPOSITIONINT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VxGLOBALPOSITIONINT {
      get { if ((_hasBits0 & 1048576) != 0) { return vxGLOBALPOSITIONINT_; } else { return 0; } }
      set {
        _hasBits0 |= 1048576;
        vxGLOBALPOSITIONINT_ = value;
      }
    }
    /// <summary>Gets whether the "vx_GLOBAL_POSITION_INT" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVxGLOBALPOSITIONINT {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "vx_GLOBAL_POSITION_INT" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVxGLOBALPOSITIONINT() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "vy_GLOBAL_POSITION_INT" field.</summary>
    public const int VyGLOBALPOSITIONINTFieldNumber = 22;
    private int vyGLOBALPOSITIONINT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VyGLOBALPOSITIONINT {
      get { if ((_hasBits0 & 2097152) != 0) { return vyGLOBALPOSITIONINT_; } else { return 0; } }
      set {
        _hasBits0 |= 2097152;
        vyGLOBALPOSITIONINT_ = value;
      }
    }
    /// <summary>Gets whether the "vy_GLOBAL_POSITION_INT" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVyGLOBALPOSITIONINT {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "vy_GLOBAL_POSITION_INT" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVyGLOBALPOSITIONINT() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "x_LOCAL_POSITION_NED" field.</summary>
    public const int XLOCALPOSITIONNEDFieldNumber = 23;
    private float xLOCALPOSITIONNED_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XLOCALPOSITIONNED {
      get { if ((_hasBits0 & 4194304) != 0) { return xLOCALPOSITIONNED_; } else { return 0F; } }
      set {
        _hasBits0 |= 4194304;
        xLOCALPOSITIONNED_ = value;
      }
    }
    /// <summary>Gets whether the "x_LOCAL_POSITION_NED" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasXLOCALPOSITIONNED {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "x_LOCAL_POSITION_NED" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearXLOCALPOSITIONNED() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "vx_LOCAL_POSITION_NED" field.</summary>
    public const int VxLOCALPOSITIONNEDFieldNumber = 24;
    private float vxLOCALPOSITIONNED_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VxLOCALPOSITIONNED {
      get { if ((_hasBits0 & 8388608) != 0) { return vxLOCALPOSITIONNED_; } else { return 0F; } }
      set {
        _hasBits0 |= 8388608;
        vxLOCALPOSITIONNED_ = value;
      }
    }
    /// <summary>Gets whether the "vx_LOCAL_POSITION_NED" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVxLOCALPOSITIONNED {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "vx_LOCAL_POSITION_NED" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVxLOCALPOSITIONNED() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "vy_LOCAL_POSITION_NED" field.</summary>
    public const int VyLOCALPOSITIONNEDFieldNumber = 25;
    private float vyLOCALPOSITIONNED_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VyLOCALPOSITIONNED {
      get { if ((_hasBits0 & 16777216) != 0) { return vyLOCALPOSITIONNED_; } else { return 0F; } }
      set {
        _hasBits0 |= 16777216;
        vyLOCALPOSITIONNED_ = value;
      }
    }
    /// <summary>Gets whether the "vy_LOCAL_POSITION_NED" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVyLOCALPOSITIONNED {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "vy_LOCAL_POSITION_NED" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVyLOCALPOSITIONNED() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "nav_pitch_NAV_CONTROLLER_OUTPUT" field.</summary>
    public const int NavPitchNAVCONTROLLEROUTPUTFieldNumber = 26;
    private float navPitchNAVCONTROLLEROUTPUT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NavPitchNAVCONTROLLEROUTPUT {
      get { if ((_hasBits0 & 33554432) != 0) { return navPitchNAVCONTROLLEROUTPUT_; } else { return 0F; } }
      set {
        _hasBits0 |= 33554432;
        navPitchNAVCONTROLLEROUTPUT_ = value;
      }
    }
    /// <summary>Gets whether the "nav_pitch_NAV_CONTROLLER_OUTPUT" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNavPitchNAVCONTROLLEROUTPUT {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "nav_pitch_NAV_CONTROLLER_OUTPUT" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNavPitchNAVCONTROLLEROUTPUT() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "nav_bearing_NAV_CONTROLLER_OUTPUT" field.</summary>
    public const int NavBearingNAVCONTROLLEROUTPUTFieldNumber = 27;
    private int navBearingNAVCONTROLLEROUTPUT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NavBearingNAVCONTROLLEROUTPUT {
      get { if ((_hasBits0 & 67108864) != 0) { return navBearingNAVCONTROLLEROUTPUT_; } else { return 0; } }
      set {
        _hasBits0 |= 67108864;
        navBearingNAVCONTROLLEROUTPUT_ = value;
      }
    }
    /// <summary>Gets whether the "nav_bearing_NAV_CONTROLLER_OUTPUT" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNavBearingNAVCONTROLLEROUTPUT {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "nav_bearing_NAV_CONTROLLER_OUTPUT" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNavBearingNAVCONTROLLEROUTPUT() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "servo3_raw_SERVO_OUTPUT_RAW" field.</summary>
    public const int Servo3RawSERVOOUTPUTRAWFieldNumber = 28;
    private uint servo3RawSERVOOUTPUTRAW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Servo3RawSERVOOUTPUTRAW {
      get { if ((_hasBits0 & 134217728) != 0) { return servo3RawSERVOOUTPUTRAW_; } else { return 0; } }
      set {
        _hasBits0 |= 134217728;
        servo3RawSERVOOUTPUTRAW_ = value;
      }
    }
    /// <summary>Gets whether the "servo3_raw_SERVO_OUTPUT_RAW" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasServo3RawSERVOOUTPUTRAW {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "servo3_raw_SERVO_OUTPUT_RAW" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearServo3RawSERVOOUTPUTRAW() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "servo8_raw_SERVO_OUTPUT_RAW" field.</summary>
    public const int Servo8RawSERVOOUTPUTRAWFieldNumber = 29;
    private uint servo8RawSERVOOUTPUTRAW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Servo8RawSERVOOUTPUTRAW {
      get { if ((_hasBits0 & 268435456) != 0) { return servo8RawSERVOOUTPUTRAW_; } else { return 0; } }
      set {
        _hasBits0 |= 268435456;
        servo8RawSERVOOUTPUTRAW_ = value;
      }
    }
    /// <summary>Gets whether the "servo8_raw_SERVO_OUTPUT_RAW" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasServo8RawSERVOOUTPUTRAW {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "servo8_raw_SERVO_OUTPUT_RAW" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearServo8RawSERVOOUTPUTRAW() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "groundspeed_VFR_HUD" field.</summary>
    public const int GroundspeedVFRHUDFieldNumber = 30;
    private float groundspeedVFRHUD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GroundspeedVFRHUD {
      get { if ((_hasBits0 & 536870912) != 0) { return groundspeedVFRHUD_; } else { return 0F; } }
      set {
        _hasBits0 |= 536870912;
        groundspeedVFRHUD_ = value;
      }
    }
    /// <summary>Gets whether the "groundspeed_VFR_HUD" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroundspeedVFRHUD {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "groundspeed_VFR_HUD" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroundspeedVFRHUD() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "airspeed_VFR_HUD" field.</summary>
    public const int AirspeedVFRHUDFieldNumber = 31;
    private float airspeedVFRHUD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirspeedVFRHUD {
      get { if ((_hasBits0 & 1073741824) != 0) { return airspeedVFRHUD_; } else { return 0F; } }
      set {
        _hasBits0 |= 1073741824;
        airspeedVFRHUD_ = value;
      }
    }
    /// <summary>Gets whether the "airspeed_VFR_HUD" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAirspeedVFRHUD {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "airspeed_VFR_HUD" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAirspeedVFRHUD() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "press_abs_SCALED_PRESSURE" field.</summary>
    public const int PressAbsSCALEDPRESSUREFieldNumber = 32;
    private float pressAbsSCALEDPRESSURE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PressAbsSCALEDPRESSURE {
      get { if ((_hasBits0 & -2147483648) != 0) { return pressAbsSCALEDPRESSURE_; } else { return 0F; } }
      set {
        _hasBits0 |= -2147483648;
        pressAbsSCALEDPRESSURE_ = value;
      }
    }
    /// <summary>Gets whether the "press_abs_SCALED_PRESSURE" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPressAbsSCALEDPRESSURE {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "press_abs_SCALED_PRESSURE" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPressAbsSCALEDPRESSURE() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "Vservo_POWER_STATUS" field.</summary>
    public const int VservoPOWERSTATUSFieldNumber = 33;
    private uint vservoPOWERSTATUS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VservoPOWERSTATUS {
      get { if ((_hasBits1 & 1) != 0) { return vservoPOWERSTATUS_; } else { return 0; } }
      set {
        _hasBits1 |= 1;
        vservoPOWERSTATUS_ = value;
      }
    }
    /// <summary>Gets whether the "Vservo_POWER_STATUS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVservoPOWERSTATUS {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Vservo_POWER_STATUS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVservoPOWERSTATUS() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "voltages1_BATTERY_STATUS" field.</summary>
    public const int Voltages1BATTERYSTATUSFieldNumber = 34;
    private double voltages1BATTERYSTATUS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Voltages1BATTERYSTATUS {
      get { if ((_hasBits1 & 2) != 0) { return voltages1BATTERYSTATUS_; } else { return 0D; } }
      set {
        _hasBits1 |= 2;
        voltages1BATTERYSTATUS_ = value;
      }
    }
    /// <summary>Gets whether the "voltages1_BATTERY_STATUS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVoltages1BATTERYSTATUS {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "voltages1_BATTERY_STATUS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVoltages1BATTERYSTATUS() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "chancount_RC_CHANNELS" field.</summary>
    public const int ChancountRCCHANNELSFieldNumber = 35;
    private int chancountRCCHANNELS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChancountRCCHANNELS {
      get { if ((_hasBits1 & 4) != 0) { return chancountRCCHANNELS_; } else { return 0; } }
      set {
        _hasBits1 |= 4;
        chancountRCCHANNELS_ = value;
      }
    }
    /// <summary>Gets whether the "chancount_RC_CHANNELS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChancountRCCHANNELS {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "chancount_RC_CHANNELS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChancountRCCHANNELS() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "chan12_raw_RC_CHANNELS" field.</summary>
    public const int Chan12RawRCCHANNELSFieldNumber = 36;
    private uint chan12RawRCCHANNELS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Chan12RawRCCHANNELS {
      get { if ((_hasBits1 & 8) != 0) { return chan12RawRCCHANNELS_; } else { return 0; } }
      set {
        _hasBits1 |= 8;
        chan12RawRCCHANNELS_ = value;
      }
    }
    /// <summary>Gets whether the "chan12_raw_RC_CHANNELS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChan12RawRCCHANNELS {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "chan12_raw_RC_CHANNELS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChan12RawRCCHANNELS() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "chan13_raw_RC_CHANNELS" field.</summary>
    public const int Chan13RawRCCHANNELSFieldNumber = 37;
    private uint chan13RawRCCHANNELS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Chan13RawRCCHANNELS {
      get { if ((_hasBits1 & 16) != 0) { return chan13RawRCCHANNELS_; } else { return 0; } }
      set {
        _hasBits1 |= 16;
        chan13RawRCCHANNELS_ = value;
      }
    }
    /// <summary>Gets whether the "chan13_raw_RC_CHANNELS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChan13RawRCCHANNELS {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "chan13_raw_RC_CHANNELS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChan13RawRCCHANNELS() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "chan14_raw_RC_CHANNELS" field.</summary>
    public const int Chan14RawRCCHANNELSFieldNumber = 38;
    private uint chan14RawRCCHANNELS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Chan14RawRCCHANNELS {
      get { if ((_hasBits1 & 32) != 0) { return chan14RawRCCHANNELS_; } else { return 0; } }
      set {
        _hasBits1 |= 32;
        chan14RawRCCHANNELS_ = value;
      }
    }
    /// <summary>Gets whether the "chan14_raw_RC_CHANNELS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChan14RawRCCHANNELS {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "chan14_raw_RC_CHANNELS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChan14RawRCCHANNELS() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "chan15_raw_RC_CHANNELS" field.</summary>
    public const int Chan15RawRCCHANNELSFieldNumber = 39;
    private uint chan15RawRCCHANNELS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Chan15RawRCCHANNELS {
      get { if ((_hasBits1 & 64) != 0) { return chan15RawRCCHANNELS_; } else { return 0; } }
      set {
        _hasBits1 |= 64;
        chan15RawRCCHANNELS_ = value;
      }
    }
    /// <summary>Gets whether the "chan15_raw_RC_CHANNELS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChan15RawRCCHANNELS {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "chan15_raw_RC_CHANNELS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChan15RawRCCHANNELS() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "chan16_raw_RC_CHANNELS" field.</summary>
    public const int Chan16RawRCCHANNELSFieldNumber = 40;
    private uint chan16RawRCCHANNELS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Chan16RawRCCHANNELS {
      get { if ((_hasBits1 & 128) != 0) { return chan16RawRCCHANNELS_; } else { return 0; } }
      set {
        _hasBits1 |= 128;
        chan16RawRCCHANNELS_ = value;
      }
    }
    /// <summary>Gets whether the "chan16_raw_RC_CHANNELS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChan16RawRCCHANNELS {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "chan16_raw_RC_CHANNELS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChan16RawRCCHANNELS() {
      _hasBits1 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GrpcSensorData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GrpcSensorData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RollATTITUDE, other.RollATTITUDE)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PitchATTITUDE, other.PitchATTITUDE)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YawATTITUDE, other.YawATTITUDE)) return false;
      if (XaccRAWIMU != other.XaccRAWIMU) return false;
      if (YaccRAWIMU != other.YaccRAWIMU) return false;
      if (ZaccRAWIMU != other.ZaccRAWIMU) return false;
      if (XgyroRAWIMU != other.XgyroRAWIMU) return false;
      if (YgyroRAWIMU != other.YgyroRAWIMU) return false;
      if (ZgyroRAWIMU != other.ZgyroRAWIMU) return false;
      if (XmagRAWIMU != other.XmagRAWIMU) return false;
      if (YmagRAWIMU != other.YmagRAWIMU) return false;
      if (ZmagRAWIMU != other.ZmagRAWIMU) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VibrationXVIBRATION, other.VibrationXVIBRATION)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VibrationYVIBRATION, other.VibrationYVIBRATION)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VibrationZVIBRATION, other.VibrationZVIBRATION)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelCalXSENSOROFFSETS, other.AccelCalXSENSOROFFSETS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelCalYSENSOROFFSETS, other.AccelCalYSENSOROFFSETS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelCalZSENSOROFFSETS, other.AccelCalZSENSOROFFSETS)) return false;
      if (MagOfsXSENSOROFFSETS != other.MagOfsXSENSOROFFSETS) return false;
      if (MagOfsYSENSOROFFSETS != other.MagOfsYSENSOROFFSETS) return false;
      if (VxGLOBALPOSITIONINT != other.VxGLOBALPOSITIONINT) return false;
      if (VyGLOBALPOSITIONINT != other.VyGLOBALPOSITIONINT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XLOCALPOSITIONNED, other.XLOCALPOSITIONNED)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VxLOCALPOSITIONNED, other.VxLOCALPOSITIONNED)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VyLOCALPOSITIONNED, other.VyLOCALPOSITIONNED)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NavPitchNAVCONTROLLEROUTPUT, other.NavPitchNAVCONTROLLEROUTPUT)) return false;
      if (NavBearingNAVCONTROLLEROUTPUT != other.NavBearingNAVCONTROLLEROUTPUT) return false;
      if (Servo3RawSERVOOUTPUTRAW != other.Servo3RawSERVOOUTPUTRAW) return false;
      if (Servo8RawSERVOOUTPUTRAW != other.Servo8RawSERVOOUTPUTRAW) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GroundspeedVFRHUD, other.GroundspeedVFRHUD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirspeedVFRHUD, other.AirspeedVFRHUD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PressAbsSCALEDPRESSURE, other.PressAbsSCALEDPRESSURE)) return false;
      if (VservoPOWERSTATUS != other.VservoPOWERSTATUS) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Voltages1BATTERYSTATUS, other.Voltages1BATTERYSTATUS)) return false;
      if (ChancountRCCHANNELS != other.ChancountRCCHANNELS) return false;
      if (Chan12RawRCCHANNELS != other.Chan12RawRCCHANNELS) return false;
      if (Chan13RawRCCHANNELS != other.Chan13RawRCCHANNELS) return false;
      if (Chan14RawRCCHANNELS != other.Chan14RawRCCHANNELS) return false;
      if (Chan15RawRCCHANNELS != other.Chan15RawRCCHANNELS) return false;
      if (Chan16RawRCCHANNELS != other.Chan16RawRCCHANNELS) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRollATTITUDE) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RollATTITUDE);
      if (HasPitchATTITUDE) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PitchATTITUDE);
      if (HasYawATTITUDE) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YawATTITUDE);
      if (HasXaccRAWIMU) hash ^= XaccRAWIMU.GetHashCode();
      if (HasYaccRAWIMU) hash ^= YaccRAWIMU.GetHashCode();
      if (HasZaccRAWIMU) hash ^= ZaccRAWIMU.GetHashCode();
      if (HasXgyroRAWIMU) hash ^= XgyroRAWIMU.GetHashCode();
      if (HasYgyroRAWIMU) hash ^= YgyroRAWIMU.GetHashCode();
      if (HasZgyroRAWIMU) hash ^= ZgyroRAWIMU.GetHashCode();
      if (HasXmagRAWIMU) hash ^= XmagRAWIMU.GetHashCode();
      if (HasYmagRAWIMU) hash ^= YmagRAWIMU.GetHashCode();
      if (HasZmagRAWIMU) hash ^= ZmagRAWIMU.GetHashCode();
      if (HasVibrationXVIBRATION) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VibrationXVIBRATION);
      if (HasVibrationYVIBRATION) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VibrationYVIBRATION);
      if (HasVibrationZVIBRATION) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VibrationZVIBRATION);
      if (HasAccelCalXSENSOROFFSETS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelCalXSENSOROFFSETS);
      if (HasAccelCalYSENSOROFFSETS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelCalYSENSOROFFSETS);
      if (HasAccelCalZSENSOROFFSETS) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelCalZSENSOROFFSETS);
      if (HasMagOfsXSENSOROFFSETS) hash ^= MagOfsXSENSOROFFSETS.GetHashCode();
      if (HasMagOfsYSENSOROFFSETS) hash ^= MagOfsYSENSOROFFSETS.GetHashCode();
      if (HasVxGLOBALPOSITIONINT) hash ^= VxGLOBALPOSITIONINT.GetHashCode();
      if (HasVyGLOBALPOSITIONINT) hash ^= VyGLOBALPOSITIONINT.GetHashCode();
      if (HasXLOCALPOSITIONNED) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XLOCALPOSITIONNED);
      if (HasVxLOCALPOSITIONNED) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VxLOCALPOSITIONNED);
      if (HasVyLOCALPOSITIONNED) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VyLOCALPOSITIONNED);
      if (HasNavPitchNAVCONTROLLEROUTPUT) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NavPitchNAVCONTROLLEROUTPUT);
      if (HasNavBearingNAVCONTROLLEROUTPUT) hash ^= NavBearingNAVCONTROLLEROUTPUT.GetHashCode();
      if (HasServo3RawSERVOOUTPUTRAW) hash ^= Servo3RawSERVOOUTPUTRAW.GetHashCode();
      if (HasServo8RawSERVOOUTPUTRAW) hash ^= Servo8RawSERVOOUTPUTRAW.GetHashCode();
      if (HasGroundspeedVFRHUD) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GroundspeedVFRHUD);
      if (HasAirspeedVFRHUD) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirspeedVFRHUD);
      if (HasPressAbsSCALEDPRESSURE) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PressAbsSCALEDPRESSURE);
      if (HasVservoPOWERSTATUS) hash ^= VservoPOWERSTATUS.GetHashCode();
      if (HasVoltages1BATTERYSTATUS) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Voltages1BATTERYSTATUS);
      if (HasChancountRCCHANNELS) hash ^= ChancountRCCHANNELS.GetHashCode();
      if (HasChan12RawRCCHANNELS) hash ^= Chan12RawRCCHANNELS.GetHashCode();
      if (HasChan13RawRCCHANNELS) hash ^= Chan13RawRCCHANNELS.GetHashCode();
      if (HasChan14RawRCCHANNELS) hash ^= Chan14RawRCCHANNELS.GetHashCode();
      if (HasChan15RawRCCHANNELS) hash ^= Chan15RawRCCHANNELS.GetHashCode();
      if (HasChan16RawRCCHANNELS) hash ^= Chan16RawRCCHANNELS.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRollATTITUDE) {
        output.WriteRawTag(13);
        output.WriteFloat(RollATTITUDE);
      }
      if (HasPitchATTITUDE) {
        output.WriteRawTag(21);
        output.WriteFloat(PitchATTITUDE);
      }
      if (HasYawATTITUDE) {
        output.WriteRawTag(29);
        output.WriteFloat(YawATTITUDE);
      }
      if (HasXaccRAWIMU) {
        output.WriteRawTag(32);
        output.WriteInt32(XaccRAWIMU);
      }
      if (HasYaccRAWIMU) {
        output.WriteRawTag(40);
        output.WriteInt32(YaccRAWIMU);
      }
      if (HasZaccRAWIMU) {
        output.WriteRawTag(48);
        output.WriteInt32(ZaccRAWIMU);
      }
      if (HasXgyroRAWIMU) {
        output.WriteRawTag(56);
        output.WriteInt32(XgyroRAWIMU);
      }
      if (HasYgyroRAWIMU) {
        output.WriteRawTag(64);
        output.WriteInt32(YgyroRAWIMU);
      }
      if (HasZgyroRAWIMU) {
        output.WriteRawTag(72);
        output.WriteInt32(ZgyroRAWIMU);
      }
      if (HasXmagRAWIMU) {
        output.WriteRawTag(80);
        output.WriteInt32(XmagRAWIMU);
      }
      if (HasYmagRAWIMU) {
        output.WriteRawTag(88);
        output.WriteInt32(YmagRAWIMU);
      }
      if (HasZmagRAWIMU) {
        output.WriteRawTag(96);
        output.WriteInt32(ZmagRAWIMU);
      }
      if (HasVibrationXVIBRATION) {
        output.WriteRawTag(109);
        output.WriteFloat(VibrationXVIBRATION);
      }
      if (HasVibrationYVIBRATION) {
        output.WriteRawTag(117);
        output.WriteFloat(VibrationYVIBRATION);
      }
      if (HasVibrationZVIBRATION) {
        output.WriteRawTag(125);
        output.WriteFloat(VibrationZVIBRATION);
      }
      if (HasAccelCalXSENSOROFFSETS) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AccelCalXSENSOROFFSETS);
      }
      if (HasAccelCalYSENSOROFFSETS) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AccelCalYSENSOROFFSETS);
      }
      if (HasAccelCalZSENSOROFFSETS) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AccelCalZSENSOROFFSETS);
      }
      if (HasMagOfsXSENSOROFFSETS) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MagOfsXSENSOROFFSETS);
      }
      if (HasMagOfsYSENSOROFFSETS) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MagOfsYSENSOROFFSETS);
      }
      if (HasVxGLOBALPOSITIONINT) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(VxGLOBALPOSITIONINT);
      }
      if (HasVyGLOBALPOSITIONINT) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(VyGLOBALPOSITIONINT);
      }
      if (HasXLOCALPOSITIONNED) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(XLOCALPOSITIONNED);
      }
      if (HasVxLOCALPOSITIONNED) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(VxLOCALPOSITIONNED);
      }
      if (HasVyLOCALPOSITIONNED) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(VyLOCALPOSITIONNED);
      }
      if (HasNavPitchNAVCONTROLLEROUTPUT) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(NavPitchNAVCONTROLLEROUTPUT);
      }
      if (HasNavBearingNAVCONTROLLEROUTPUT) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NavBearingNAVCONTROLLEROUTPUT);
      }
      if (HasServo3RawSERVOOUTPUTRAW) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(Servo3RawSERVOOUTPUTRAW);
      }
      if (HasServo8RawSERVOOUTPUTRAW) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Servo8RawSERVOOUTPUTRAW);
      }
      if (HasGroundspeedVFRHUD) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(GroundspeedVFRHUD);
      }
      if (HasAirspeedVFRHUD) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(AirspeedVFRHUD);
      }
      if (HasPressAbsSCALEDPRESSURE) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(PressAbsSCALEDPRESSURE);
      }
      if (HasVservoPOWERSTATUS) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(VservoPOWERSTATUS);
      }
      if (HasVoltages1BATTERYSTATUS) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(Voltages1BATTERYSTATUS);
      }
      if (HasChancountRCCHANNELS) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ChancountRCCHANNELS);
      }
      if (HasChan12RawRCCHANNELS) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Chan12RawRCCHANNELS);
      }
      if (HasChan13RawRCCHANNELS) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Chan13RawRCCHANNELS);
      }
      if (HasChan14RawRCCHANNELS) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(Chan14RawRCCHANNELS);
      }
      if (HasChan15RawRCCHANNELS) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Chan15RawRCCHANNELS);
      }
      if (HasChan16RawRCCHANNELS) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(Chan16RawRCCHANNELS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRollATTITUDE) {
        output.WriteRawTag(13);
        output.WriteFloat(RollATTITUDE);
      }
      if (HasPitchATTITUDE) {
        output.WriteRawTag(21);
        output.WriteFloat(PitchATTITUDE);
      }
      if (HasYawATTITUDE) {
        output.WriteRawTag(29);
        output.WriteFloat(YawATTITUDE);
      }
      if (HasXaccRAWIMU) {
        output.WriteRawTag(32);
        output.WriteInt32(XaccRAWIMU);
      }
      if (HasYaccRAWIMU) {
        output.WriteRawTag(40);
        output.WriteInt32(YaccRAWIMU);
      }
      if (HasZaccRAWIMU) {
        output.WriteRawTag(48);
        output.WriteInt32(ZaccRAWIMU);
      }
      if (HasXgyroRAWIMU) {
        output.WriteRawTag(56);
        output.WriteInt32(XgyroRAWIMU);
      }
      if (HasYgyroRAWIMU) {
        output.WriteRawTag(64);
        output.WriteInt32(YgyroRAWIMU);
      }
      if (HasZgyroRAWIMU) {
        output.WriteRawTag(72);
        output.WriteInt32(ZgyroRAWIMU);
      }
      if (HasXmagRAWIMU) {
        output.WriteRawTag(80);
        output.WriteInt32(XmagRAWIMU);
      }
      if (HasYmagRAWIMU) {
        output.WriteRawTag(88);
        output.WriteInt32(YmagRAWIMU);
      }
      if (HasZmagRAWIMU) {
        output.WriteRawTag(96);
        output.WriteInt32(ZmagRAWIMU);
      }
      if (HasVibrationXVIBRATION) {
        output.WriteRawTag(109);
        output.WriteFloat(VibrationXVIBRATION);
      }
      if (HasVibrationYVIBRATION) {
        output.WriteRawTag(117);
        output.WriteFloat(VibrationYVIBRATION);
      }
      if (HasVibrationZVIBRATION) {
        output.WriteRawTag(125);
        output.WriteFloat(VibrationZVIBRATION);
      }
      if (HasAccelCalXSENSOROFFSETS) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AccelCalXSENSOROFFSETS);
      }
      if (HasAccelCalYSENSOROFFSETS) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AccelCalYSENSOROFFSETS);
      }
      if (HasAccelCalZSENSOROFFSETS) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AccelCalZSENSOROFFSETS);
      }
      if (HasMagOfsXSENSOROFFSETS) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(MagOfsXSENSOROFFSETS);
      }
      if (HasMagOfsYSENSOROFFSETS) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MagOfsYSENSOROFFSETS);
      }
      if (HasVxGLOBALPOSITIONINT) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(VxGLOBALPOSITIONINT);
      }
      if (HasVyGLOBALPOSITIONINT) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(VyGLOBALPOSITIONINT);
      }
      if (HasXLOCALPOSITIONNED) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(XLOCALPOSITIONNED);
      }
      if (HasVxLOCALPOSITIONNED) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(VxLOCALPOSITIONNED);
      }
      if (HasVyLOCALPOSITIONNED) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(VyLOCALPOSITIONNED);
      }
      if (HasNavPitchNAVCONTROLLEROUTPUT) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(NavPitchNAVCONTROLLEROUTPUT);
      }
      if (HasNavBearingNAVCONTROLLEROUTPUT) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NavBearingNAVCONTROLLEROUTPUT);
      }
      if (HasServo3RawSERVOOUTPUTRAW) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(Servo3RawSERVOOUTPUTRAW);
      }
      if (HasServo8RawSERVOOUTPUTRAW) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Servo8RawSERVOOUTPUTRAW);
      }
      if (HasGroundspeedVFRHUD) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(GroundspeedVFRHUD);
      }
      if (HasAirspeedVFRHUD) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(AirspeedVFRHUD);
      }
      if (HasPressAbsSCALEDPRESSURE) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(PressAbsSCALEDPRESSURE);
      }
      if (HasVservoPOWERSTATUS) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(VservoPOWERSTATUS);
      }
      if (HasVoltages1BATTERYSTATUS) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(Voltages1BATTERYSTATUS);
      }
      if (HasChancountRCCHANNELS) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(ChancountRCCHANNELS);
      }
      if (HasChan12RawRCCHANNELS) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Chan12RawRCCHANNELS);
      }
      if (HasChan13RawRCCHANNELS) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Chan13RawRCCHANNELS);
      }
      if (HasChan14RawRCCHANNELS) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(Chan14RawRCCHANNELS);
      }
      if (HasChan15RawRCCHANNELS) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Chan15RawRCCHANNELS);
      }
      if (HasChan16RawRCCHANNELS) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(Chan16RawRCCHANNELS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRollATTITUDE) {
        size += 1 + 4;
      }
      if (HasPitchATTITUDE) {
        size += 1 + 4;
      }
      if (HasYawATTITUDE) {
        size += 1 + 4;
      }
      if (HasXaccRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XaccRAWIMU);
      }
      if (HasYaccRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YaccRAWIMU);
      }
      if (HasZaccRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZaccRAWIMU);
      }
      if (HasXgyroRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XgyroRAWIMU);
      }
      if (HasYgyroRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YgyroRAWIMU);
      }
      if (HasZgyroRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZgyroRAWIMU);
      }
      if (HasXmagRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XmagRAWIMU);
      }
      if (HasYmagRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YmagRAWIMU);
      }
      if (HasZmagRAWIMU) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ZmagRAWIMU);
      }
      if (HasVibrationXVIBRATION) {
        size += 1 + 4;
      }
      if (HasVibrationYVIBRATION) {
        size += 1 + 4;
      }
      if (HasVibrationZVIBRATION) {
        size += 1 + 4;
      }
      if (HasAccelCalXSENSOROFFSETS) {
        size += 2 + 4;
      }
      if (HasAccelCalYSENSOROFFSETS) {
        size += 2 + 4;
      }
      if (HasAccelCalZSENSOROFFSETS) {
        size += 2 + 4;
      }
      if (HasMagOfsXSENSOROFFSETS) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagOfsXSENSOROFFSETS);
      }
      if (HasMagOfsYSENSOROFFSETS) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MagOfsYSENSOROFFSETS);
      }
      if (HasVxGLOBALPOSITIONINT) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VxGLOBALPOSITIONINT);
      }
      if (HasVyGLOBALPOSITIONINT) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VyGLOBALPOSITIONINT);
      }
      if (HasXLOCALPOSITIONNED) {
        size += 2 + 4;
      }
      if (HasVxLOCALPOSITIONNED) {
        size += 2 + 4;
      }
      if (HasVyLOCALPOSITIONNED) {
        size += 2 + 4;
      }
      if (HasNavPitchNAVCONTROLLEROUTPUT) {
        size += 2 + 4;
      }
      if (HasNavBearingNAVCONTROLLEROUTPUT) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NavBearingNAVCONTROLLEROUTPUT);
      }
      if (HasServo3RawSERVOOUTPUTRAW) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Servo3RawSERVOOUTPUTRAW);
      }
      if (HasServo8RawSERVOOUTPUTRAW) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Servo8RawSERVOOUTPUTRAW);
      }
      if (HasGroundspeedVFRHUD) {
        size += 2 + 4;
      }
      if (HasAirspeedVFRHUD) {
        size += 2 + 4;
      }
      if (HasPressAbsSCALEDPRESSURE) {
        size += 2 + 4;
      }
      if (HasVservoPOWERSTATUS) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VservoPOWERSTATUS);
      }
      if (HasVoltages1BATTERYSTATUS) {
        size += 2 + 8;
      }
      if (HasChancountRCCHANNELS) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChancountRCCHANNELS);
      }
      if (HasChan12RawRCCHANNELS) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Chan12RawRCCHANNELS);
      }
      if (HasChan13RawRCCHANNELS) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Chan13RawRCCHANNELS);
      }
      if (HasChan14RawRCCHANNELS) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Chan14RawRCCHANNELS);
      }
      if (HasChan15RawRCCHANNELS) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Chan15RawRCCHANNELS);
      }
      if (HasChan16RawRCCHANNELS) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Chan16RawRCCHANNELS);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GrpcSensorData other) {
      if (other == null) {
        return;
      }
      if (other.HasRollATTITUDE) {
        RollATTITUDE = other.RollATTITUDE;
      }
      if (other.HasPitchATTITUDE) {
        PitchATTITUDE = other.PitchATTITUDE;
      }
      if (other.HasYawATTITUDE) {
        YawATTITUDE = other.YawATTITUDE;
      }
      if (other.HasXaccRAWIMU) {
        XaccRAWIMU = other.XaccRAWIMU;
      }
      if (other.HasYaccRAWIMU) {
        YaccRAWIMU = other.YaccRAWIMU;
      }
      if (other.HasZaccRAWIMU) {
        ZaccRAWIMU = other.ZaccRAWIMU;
      }
      if (other.HasXgyroRAWIMU) {
        XgyroRAWIMU = other.XgyroRAWIMU;
      }
      if (other.HasYgyroRAWIMU) {
        YgyroRAWIMU = other.YgyroRAWIMU;
      }
      if (other.HasZgyroRAWIMU) {
        ZgyroRAWIMU = other.ZgyroRAWIMU;
      }
      if (other.HasXmagRAWIMU) {
        XmagRAWIMU = other.XmagRAWIMU;
      }
      if (other.HasYmagRAWIMU) {
        YmagRAWIMU = other.YmagRAWIMU;
      }
      if (other.HasZmagRAWIMU) {
        ZmagRAWIMU = other.ZmagRAWIMU;
      }
      if (other.HasVibrationXVIBRATION) {
        VibrationXVIBRATION = other.VibrationXVIBRATION;
      }
      if (other.HasVibrationYVIBRATION) {
        VibrationYVIBRATION = other.VibrationYVIBRATION;
      }
      if (other.HasVibrationZVIBRATION) {
        VibrationZVIBRATION = other.VibrationZVIBRATION;
      }
      if (other.HasAccelCalXSENSOROFFSETS) {
        AccelCalXSENSOROFFSETS = other.AccelCalXSENSOROFFSETS;
      }
      if (other.HasAccelCalYSENSOROFFSETS) {
        AccelCalYSENSOROFFSETS = other.AccelCalYSENSOROFFSETS;
      }
      if (other.HasAccelCalZSENSOROFFSETS) {
        AccelCalZSENSOROFFSETS = other.AccelCalZSENSOROFFSETS;
      }
      if (other.HasMagOfsXSENSOROFFSETS) {
        MagOfsXSENSOROFFSETS = other.MagOfsXSENSOROFFSETS;
      }
      if (other.HasMagOfsYSENSOROFFSETS) {
        MagOfsYSENSOROFFSETS = other.MagOfsYSENSOROFFSETS;
      }
      if (other.HasVxGLOBALPOSITIONINT) {
        VxGLOBALPOSITIONINT = other.VxGLOBALPOSITIONINT;
      }
      if (other.HasVyGLOBALPOSITIONINT) {
        VyGLOBALPOSITIONINT = other.VyGLOBALPOSITIONINT;
      }
      if (other.HasXLOCALPOSITIONNED) {
        XLOCALPOSITIONNED = other.XLOCALPOSITIONNED;
      }
      if (other.HasVxLOCALPOSITIONNED) {
        VxLOCALPOSITIONNED = other.VxLOCALPOSITIONNED;
      }
      if (other.HasVyLOCALPOSITIONNED) {
        VyLOCALPOSITIONNED = other.VyLOCALPOSITIONNED;
      }
      if (other.HasNavPitchNAVCONTROLLEROUTPUT) {
        NavPitchNAVCONTROLLEROUTPUT = other.NavPitchNAVCONTROLLEROUTPUT;
      }
      if (other.HasNavBearingNAVCONTROLLEROUTPUT) {
        NavBearingNAVCONTROLLEROUTPUT = other.NavBearingNAVCONTROLLEROUTPUT;
      }
      if (other.HasServo3RawSERVOOUTPUTRAW) {
        Servo3RawSERVOOUTPUTRAW = other.Servo3RawSERVOOUTPUTRAW;
      }
      if (other.HasServo8RawSERVOOUTPUTRAW) {
        Servo8RawSERVOOUTPUTRAW = other.Servo8RawSERVOOUTPUTRAW;
      }
      if (other.HasGroundspeedVFRHUD) {
        GroundspeedVFRHUD = other.GroundspeedVFRHUD;
      }
      if (other.HasAirspeedVFRHUD) {
        AirspeedVFRHUD = other.AirspeedVFRHUD;
      }
      if (other.HasPressAbsSCALEDPRESSURE) {
        PressAbsSCALEDPRESSURE = other.PressAbsSCALEDPRESSURE;
      }
      if (other.HasVservoPOWERSTATUS) {
        VservoPOWERSTATUS = other.VservoPOWERSTATUS;
      }
      if (other.HasVoltages1BATTERYSTATUS) {
        Voltages1BATTERYSTATUS = other.Voltages1BATTERYSTATUS;
      }
      if (other.HasChancountRCCHANNELS) {
        ChancountRCCHANNELS = other.ChancountRCCHANNELS;
      }
      if (other.HasChan12RawRCCHANNELS) {
        Chan12RawRCCHANNELS = other.Chan12RawRCCHANNELS;
      }
      if (other.HasChan13RawRCCHANNELS) {
        Chan13RawRCCHANNELS = other.Chan13RawRCCHANNELS;
      }
      if (other.HasChan14RawRCCHANNELS) {
        Chan14RawRCCHANNELS = other.Chan14RawRCCHANNELS;
      }
      if (other.HasChan15RawRCCHANNELS) {
        Chan15RawRCCHANNELS = other.Chan15RawRCCHANNELS;
      }
      if (other.HasChan16RawRCCHANNELS) {
        Chan16RawRCCHANNELS = other.Chan16RawRCCHANNELS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            RollATTITUDE = input.ReadFloat();
            break;
          }
          case 21: {
            PitchATTITUDE = input.ReadFloat();
            break;
          }
          case 29: {
            YawATTITUDE = input.ReadFloat();
            break;
          }
          case 32: {
            XaccRAWIMU = input.ReadInt32();
            break;
          }
          case 40: {
            YaccRAWIMU = input.ReadInt32();
            break;
          }
          case 48: {
            ZaccRAWIMU = input.ReadInt32();
            break;
          }
          case 56: {
            XgyroRAWIMU = input.ReadInt32();
            break;
          }
          case 64: {
            YgyroRAWIMU = input.ReadInt32();
            break;
          }
          case 72: {
            ZgyroRAWIMU = input.ReadInt32();
            break;
          }
          case 80: {
            XmagRAWIMU = input.ReadInt32();
            break;
          }
          case 88: {
            YmagRAWIMU = input.ReadInt32();
            break;
          }
          case 96: {
            ZmagRAWIMU = input.ReadInt32();
            break;
          }
          case 109: {
            VibrationXVIBRATION = input.ReadFloat();
            break;
          }
          case 117: {
            VibrationYVIBRATION = input.ReadFloat();
            break;
          }
          case 125: {
            VibrationZVIBRATION = input.ReadFloat();
            break;
          }
          case 133: {
            AccelCalXSENSOROFFSETS = input.ReadFloat();
            break;
          }
          case 141: {
            AccelCalYSENSOROFFSETS = input.ReadFloat();
            break;
          }
          case 149: {
            AccelCalZSENSOROFFSETS = input.ReadFloat();
            break;
          }
          case 152: {
            MagOfsXSENSOROFFSETS = input.ReadInt32();
            break;
          }
          case 160: {
            MagOfsYSENSOROFFSETS = input.ReadInt32();
            break;
          }
          case 168: {
            VxGLOBALPOSITIONINT = input.ReadInt32();
            break;
          }
          case 176: {
            VyGLOBALPOSITIONINT = input.ReadInt32();
            break;
          }
          case 189: {
            XLOCALPOSITIONNED = input.ReadFloat();
            break;
          }
          case 197: {
            VxLOCALPOSITIONNED = input.ReadFloat();
            break;
          }
          case 205: {
            VyLOCALPOSITIONNED = input.ReadFloat();
            break;
          }
          case 213: {
            NavPitchNAVCONTROLLEROUTPUT = input.ReadFloat();
            break;
          }
          case 216: {
            NavBearingNAVCONTROLLEROUTPUT = input.ReadInt32();
            break;
          }
          case 224: {
            Servo3RawSERVOOUTPUTRAW = input.ReadUInt32();
            break;
          }
          case 232: {
            Servo8RawSERVOOUTPUTRAW = input.ReadUInt32();
            break;
          }
          case 245: {
            GroundspeedVFRHUD = input.ReadFloat();
            break;
          }
          case 253: {
            AirspeedVFRHUD = input.ReadFloat();
            break;
          }
          case 261: {
            PressAbsSCALEDPRESSURE = input.ReadFloat();
            break;
          }
          case 264: {
            VservoPOWERSTATUS = input.ReadUInt32();
            break;
          }
          case 273: {
            Voltages1BATTERYSTATUS = input.ReadDouble();
            break;
          }
          case 280: {
            ChancountRCCHANNELS = input.ReadInt32();
            break;
          }
          case 288: {
            Chan12RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 296: {
            Chan13RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 304: {
            Chan14RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 312: {
            Chan15RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 320: {
            Chan16RawRCCHANNELS = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            RollATTITUDE = input.ReadFloat();
            break;
          }
          case 21: {
            PitchATTITUDE = input.ReadFloat();
            break;
          }
          case 29: {
            YawATTITUDE = input.ReadFloat();
            break;
          }
          case 32: {
            XaccRAWIMU = input.ReadInt32();
            break;
          }
          case 40: {
            YaccRAWIMU = input.ReadInt32();
            break;
          }
          case 48: {
            ZaccRAWIMU = input.ReadInt32();
            break;
          }
          case 56: {
            XgyroRAWIMU = input.ReadInt32();
            break;
          }
          case 64: {
            YgyroRAWIMU = input.ReadInt32();
            break;
          }
          case 72: {
            ZgyroRAWIMU = input.ReadInt32();
            break;
          }
          case 80: {
            XmagRAWIMU = input.ReadInt32();
            break;
          }
          case 88: {
            YmagRAWIMU = input.ReadInt32();
            break;
          }
          case 96: {
            ZmagRAWIMU = input.ReadInt32();
            break;
          }
          case 109: {
            VibrationXVIBRATION = input.ReadFloat();
            break;
          }
          case 117: {
            VibrationYVIBRATION = input.ReadFloat();
            break;
          }
          case 125: {
            VibrationZVIBRATION = input.ReadFloat();
            break;
          }
          case 133: {
            AccelCalXSENSOROFFSETS = input.ReadFloat();
            break;
          }
          case 141: {
            AccelCalYSENSOROFFSETS = input.ReadFloat();
            break;
          }
          case 149: {
            AccelCalZSENSOROFFSETS = input.ReadFloat();
            break;
          }
          case 152: {
            MagOfsXSENSOROFFSETS = input.ReadInt32();
            break;
          }
          case 160: {
            MagOfsYSENSOROFFSETS = input.ReadInt32();
            break;
          }
          case 168: {
            VxGLOBALPOSITIONINT = input.ReadInt32();
            break;
          }
          case 176: {
            VyGLOBALPOSITIONINT = input.ReadInt32();
            break;
          }
          case 189: {
            XLOCALPOSITIONNED = input.ReadFloat();
            break;
          }
          case 197: {
            VxLOCALPOSITIONNED = input.ReadFloat();
            break;
          }
          case 205: {
            VyLOCALPOSITIONNED = input.ReadFloat();
            break;
          }
          case 213: {
            NavPitchNAVCONTROLLEROUTPUT = input.ReadFloat();
            break;
          }
          case 216: {
            NavBearingNAVCONTROLLEROUTPUT = input.ReadInt32();
            break;
          }
          case 224: {
            Servo3RawSERVOOUTPUTRAW = input.ReadUInt32();
            break;
          }
          case 232: {
            Servo8RawSERVOOUTPUTRAW = input.ReadUInt32();
            break;
          }
          case 245: {
            GroundspeedVFRHUD = input.ReadFloat();
            break;
          }
          case 253: {
            AirspeedVFRHUD = input.ReadFloat();
            break;
          }
          case 261: {
            PressAbsSCALEDPRESSURE = input.ReadFloat();
            break;
          }
          case 264: {
            VservoPOWERSTATUS = input.ReadUInt32();
            break;
          }
          case 273: {
            Voltages1BATTERYSTATUS = input.ReadDouble();
            break;
          }
          case 280: {
            ChancountRCCHANNELS = input.ReadInt32();
            break;
          }
          case 288: {
            Chan12RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 296: {
            Chan13RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 304: {
            Chan14RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 312: {
            Chan15RawRCCHANNELS = input.ReadUInt32();
            break;
          }
          case 320: {
            Chan16RawRCCHANNELS = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StatusResponse : pb::IMessage<StatusResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusResponse(StatusResponse other) : this() {
      droneId_ = other.droneId_;
      predictData_ = other.predictData_ != null ? other.predictData_.Clone() : null;
      warningData_ = other.warningData_ != null ? other.warningData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "DroneId" field.</summary>
    public const int DroneIdFieldNumber = 1;
    private string droneId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DroneId {
      get { return droneId_; }
      set {
        droneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PredictData" field.</summary>
    public const int PredictDataFieldNumber = 2;
    private global::KisaGcsSystem.Services.GrpcPredictData predictData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::KisaGcsSystem.Services.GrpcPredictData PredictData {
      get { return predictData_; }
      set {
        predictData_ = value;
      }
    }

    /// <summary>Field number for the "WarningData" field.</summary>
    public const int WarningDataFieldNumber = 3;
    private global::KisaGcsSystem.Services.GrpcWarningData warningData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::KisaGcsSystem.Services.GrpcWarningData WarningData {
      get { return warningData_; }
      set {
        warningData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneId != other.DroneId) return false;
      if (!object.Equals(PredictData, other.PredictData)) return false;
      if (!object.Equals(WarningData, other.WarningData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneId.Length != 0) hash ^= DroneId.GetHashCode();
      if (predictData_ != null) hash ^= PredictData.GetHashCode();
      if (warningData_ != null) hash ^= WarningData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DroneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DroneId);
      }
      if (predictData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PredictData);
      }
      if (warningData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WarningData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DroneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DroneId);
      }
      if (predictData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PredictData);
      }
      if (warningData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WarningData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DroneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DroneId);
      }
      if (predictData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredictData);
      }
      if (warningData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarningData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.DroneId.Length != 0) {
        DroneId = other.DroneId;
      }
      if (other.predictData_ != null) {
        if (predictData_ == null) {
          PredictData = new global::KisaGcsSystem.Services.GrpcPredictData();
        }
        PredictData.MergeFrom(other.PredictData);
      }
      if (other.warningData_ != null) {
        if (warningData_ == null) {
          WarningData = new global::KisaGcsSystem.Services.GrpcWarningData();
        }
        WarningData.MergeFrom(other.WarningData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DroneId = input.ReadString();
            break;
          }
          case 18: {
            if (predictData_ == null) {
              PredictData = new global::KisaGcsSystem.Services.GrpcPredictData();
            }
            input.ReadMessage(PredictData);
            break;
          }
          case 26: {
            if (warningData_ == null) {
              WarningData = new global::KisaGcsSystem.Services.GrpcWarningData();
            }
            input.ReadMessage(WarningData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DroneId = input.ReadString();
            break;
          }
          case 18: {
            if (predictData_ == null) {
              PredictData = new global::KisaGcsSystem.Services.GrpcPredictData();
            }
            input.ReadMessage(PredictData);
            break;
          }
          case 26: {
            if (warningData_ == null) {
              WarningData = new global::KisaGcsSystem.Services.GrpcWarningData();
            }
            input.ReadMessage(WarningData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GrpcPredictData : pb::IMessage<GrpcPredictData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrpcPredictData> _parser = new pb::MessageParser<GrpcPredictData>(() => new GrpcPredictData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GrpcPredictData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcPredictData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcPredictData(GrpcPredictData other) : this() {
      rollATTITUDEPREDICT_ = other.rollATTITUDEPREDICT_;
      yawATTITUDEPREDICT_ = other.yawATTITUDEPREDICT_;
      pitchATTITUDEPREDICT_ = other.pitchATTITUDEPREDICT_;
      xaccRAWIMUPREDICT_ = other.xaccRAWIMUPREDICT_;
      yaccRAWIMUPREDICT_ = other.yaccRAWIMUPREDICT_;
      zaccRAWIMUPREDICT_ = other.zaccRAWIMUPREDICT_;
      xgyroRAWIMUPREDICT_ = other.xgyroRAWIMUPREDICT_;
      ygyroRAWIMUPREDICT_ = other.ygyroRAWIMUPREDICT_;
      zgyroRAWIMUPREDICT_ = other.zgyroRAWIMUPREDICT_;
      xmagRAWIMUPREDICT_ = other.xmagRAWIMUPREDICT_;
      ymagRAWIMUPREDICT_ = other.ymagRAWIMUPREDICT_;
      zmagRAWIMUPREDICT_ = other.zmagRAWIMUPREDICT_;
      vibrationXVIBRATIONPREDICT_ = other.vibrationXVIBRATIONPREDICT_;
      vibrationYVIBRATIONPREDICT_ = other.vibrationYVIBRATIONPREDICT_;
      vibrationZVIBRATIONPREDICT_ = other.vibrationZVIBRATIONPREDICT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcPredictData Clone() {
      return new GrpcPredictData(this);
    }

    /// <summary>Field number for the "rollATTITUDE_PREDICT" field.</summary>
    public const int RollATTITUDEPREDICTFieldNumber = 1;
    private double rollATTITUDEPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RollATTITUDEPREDICT {
      get { return rollATTITUDEPREDICT_; }
      set {
        rollATTITUDEPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "yawATTITUDE_PREDICT" field.</summary>
    public const int YawATTITUDEPREDICTFieldNumber = 2;
    private double yawATTITUDEPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double YawATTITUDEPREDICT {
      get { return yawATTITUDEPREDICT_; }
      set {
        yawATTITUDEPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "pitchATTITUDE_PREDICT" field.</summary>
    public const int PitchATTITUDEPREDICTFieldNumber = 3;
    private double pitchATTITUDEPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PitchATTITUDEPREDICT {
      get { return pitchATTITUDEPREDICT_; }
      set {
        pitchATTITUDEPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "xaccRAWIMU_PREDICT" field.</summary>
    public const int XaccRAWIMUPREDICTFieldNumber = 4;
    private double xaccRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double XaccRAWIMUPREDICT {
      get { return xaccRAWIMUPREDICT_; }
      set {
        xaccRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "yaccRAWIMU_PREDICT" field.</summary>
    public const int YaccRAWIMUPREDICTFieldNumber = 5;
    private double yaccRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double YaccRAWIMUPREDICT {
      get { return yaccRAWIMUPREDICT_; }
      set {
        yaccRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "zaccRAWIMU_PREDICT" field.</summary>
    public const int ZaccRAWIMUPREDICTFieldNumber = 6;
    private double zaccRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ZaccRAWIMUPREDICT {
      get { return zaccRAWIMUPREDICT_; }
      set {
        zaccRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "xgyroRAWIMU_PREDICT" field.</summary>
    public const int XgyroRAWIMUPREDICTFieldNumber = 7;
    private double xgyroRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double XgyroRAWIMUPREDICT {
      get { return xgyroRAWIMUPREDICT_; }
      set {
        xgyroRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "ygyroRAWIMU_PREDICT" field.</summary>
    public const int YgyroRAWIMUPREDICTFieldNumber = 8;
    private double ygyroRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double YgyroRAWIMUPREDICT {
      get { return ygyroRAWIMUPREDICT_; }
      set {
        ygyroRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "zgyroRAWIMU_PREDICT" field.</summary>
    public const int ZgyroRAWIMUPREDICTFieldNumber = 9;
    private double zgyroRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ZgyroRAWIMUPREDICT {
      get { return zgyroRAWIMUPREDICT_; }
      set {
        zgyroRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "xmagRAWIMU_PREDICT" field.</summary>
    public const int XmagRAWIMUPREDICTFieldNumber = 10;
    private double xmagRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double XmagRAWIMUPREDICT {
      get { return xmagRAWIMUPREDICT_; }
      set {
        xmagRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "ymagRAWIMU_PREDICT" field.</summary>
    public const int YmagRAWIMUPREDICTFieldNumber = 11;
    private double ymagRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double YmagRAWIMUPREDICT {
      get { return ymagRAWIMUPREDICT_; }
      set {
        ymagRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "zmagRAWIMU_PREDICT" field.</summary>
    public const int ZmagRAWIMUPREDICTFieldNumber = 12;
    private double zmagRAWIMUPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ZmagRAWIMUPREDICT {
      get { return zmagRAWIMUPREDICT_; }
      set {
        zmagRAWIMUPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "vibrationXVIBRATION_PREDICT" field.</summary>
    public const int VibrationXVIBRATIONPREDICTFieldNumber = 13;
    private double vibrationXVIBRATIONPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VibrationXVIBRATIONPREDICT {
      get { return vibrationXVIBRATIONPREDICT_; }
      set {
        vibrationXVIBRATIONPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "vibrationYVIBRATION_PREDICT" field.</summary>
    public const int VibrationYVIBRATIONPREDICTFieldNumber = 14;
    private double vibrationYVIBRATIONPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VibrationYVIBRATIONPREDICT {
      get { return vibrationYVIBRATIONPREDICT_; }
      set {
        vibrationYVIBRATIONPREDICT_ = value;
      }
    }

    /// <summary>Field number for the "vibrationZVIBRATION_PREDICT" field.</summary>
    public const int VibrationZVIBRATIONPREDICTFieldNumber = 15;
    private double vibrationZVIBRATIONPREDICT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VibrationZVIBRATIONPREDICT {
      get { return vibrationZVIBRATIONPREDICT_; }
      set {
        vibrationZVIBRATIONPREDICT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GrpcPredictData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GrpcPredictData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RollATTITUDEPREDICT, other.RollATTITUDEPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawATTITUDEPREDICT, other.YawATTITUDEPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PitchATTITUDEPREDICT, other.PitchATTITUDEPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XaccRAWIMUPREDICT, other.XaccRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YaccRAWIMUPREDICT, other.YaccRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ZaccRAWIMUPREDICT, other.ZaccRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XgyroRAWIMUPREDICT, other.XgyroRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YgyroRAWIMUPREDICT, other.YgyroRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ZgyroRAWIMUPREDICT, other.ZgyroRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XmagRAWIMUPREDICT, other.XmagRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YmagRAWIMUPREDICT, other.YmagRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ZmagRAWIMUPREDICT, other.ZmagRAWIMUPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VibrationXVIBRATIONPREDICT, other.VibrationXVIBRATIONPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VibrationYVIBRATIONPREDICT, other.VibrationYVIBRATIONPREDICT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VibrationZVIBRATIONPREDICT, other.VibrationZVIBRATIONPREDICT)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RollATTITUDEPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RollATTITUDEPREDICT);
      if (YawATTITUDEPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawATTITUDEPREDICT);
      if (PitchATTITUDEPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PitchATTITUDEPREDICT);
      if (XaccRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XaccRAWIMUPREDICT);
      if (YaccRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YaccRAWIMUPREDICT);
      if (ZaccRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ZaccRAWIMUPREDICT);
      if (XgyroRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XgyroRAWIMUPREDICT);
      if (YgyroRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YgyroRAWIMUPREDICT);
      if (ZgyroRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ZgyroRAWIMUPREDICT);
      if (XmagRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XmagRAWIMUPREDICT);
      if (YmagRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YmagRAWIMUPREDICT);
      if (ZmagRAWIMUPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ZmagRAWIMUPREDICT);
      if (VibrationXVIBRATIONPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VibrationXVIBRATIONPREDICT);
      if (VibrationYVIBRATIONPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VibrationYVIBRATIONPREDICT);
      if (VibrationZVIBRATIONPREDICT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VibrationZVIBRATIONPREDICT);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RollATTITUDEPREDICT != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(RollATTITUDEPREDICT);
      }
      if (YawATTITUDEPREDICT != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(YawATTITUDEPREDICT);
      }
      if (PitchATTITUDEPREDICT != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PitchATTITUDEPREDICT);
      }
      if (XaccRAWIMUPREDICT != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(XaccRAWIMUPREDICT);
      }
      if (YaccRAWIMUPREDICT != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(YaccRAWIMUPREDICT);
      }
      if (ZaccRAWIMUPREDICT != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ZaccRAWIMUPREDICT);
      }
      if (XgyroRAWIMUPREDICT != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(XgyroRAWIMUPREDICT);
      }
      if (YgyroRAWIMUPREDICT != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(YgyroRAWIMUPREDICT);
      }
      if (ZgyroRAWIMUPREDICT != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ZgyroRAWIMUPREDICT);
      }
      if (XmagRAWIMUPREDICT != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(XmagRAWIMUPREDICT);
      }
      if (YmagRAWIMUPREDICT != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(YmagRAWIMUPREDICT);
      }
      if (ZmagRAWIMUPREDICT != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ZmagRAWIMUPREDICT);
      }
      if (VibrationXVIBRATIONPREDICT != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(VibrationXVIBRATIONPREDICT);
      }
      if (VibrationYVIBRATIONPREDICT != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(VibrationYVIBRATIONPREDICT);
      }
      if (VibrationZVIBRATIONPREDICT != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(VibrationZVIBRATIONPREDICT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RollATTITUDEPREDICT != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(RollATTITUDEPREDICT);
      }
      if (YawATTITUDEPREDICT != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(YawATTITUDEPREDICT);
      }
      if (PitchATTITUDEPREDICT != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PitchATTITUDEPREDICT);
      }
      if (XaccRAWIMUPREDICT != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(XaccRAWIMUPREDICT);
      }
      if (YaccRAWIMUPREDICT != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(YaccRAWIMUPREDICT);
      }
      if (ZaccRAWIMUPREDICT != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(ZaccRAWIMUPREDICT);
      }
      if (XgyroRAWIMUPREDICT != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(XgyroRAWIMUPREDICT);
      }
      if (YgyroRAWIMUPREDICT != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(YgyroRAWIMUPREDICT);
      }
      if (ZgyroRAWIMUPREDICT != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ZgyroRAWIMUPREDICT);
      }
      if (XmagRAWIMUPREDICT != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(XmagRAWIMUPREDICT);
      }
      if (YmagRAWIMUPREDICT != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(YmagRAWIMUPREDICT);
      }
      if (ZmagRAWIMUPREDICT != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ZmagRAWIMUPREDICT);
      }
      if (VibrationXVIBRATIONPREDICT != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(VibrationXVIBRATIONPREDICT);
      }
      if (VibrationYVIBRATIONPREDICT != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(VibrationYVIBRATIONPREDICT);
      }
      if (VibrationZVIBRATIONPREDICT != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(VibrationZVIBRATIONPREDICT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RollATTITUDEPREDICT != 0D) {
        size += 1 + 8;
      }
      if (YawATTITUDEPREDICT != 0D) {
        size += 1 + 8;
      }
      if (PitchATTITUDEPREDICT != 0D) {
        size += 1 + 8;
      }
      if (XaccRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (YaccRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (ZaccRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (XgyroRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (YgyroRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (ZgyroRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (XmagRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (YmagRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (ZmagRAWIMUPREDICT != 0D) {
        size += 1 + 8;
      }
      if (VibrationXVIBRATIONPREDICT != 0D) {
        size += 1 + 8;
      }
      if (VibrationYVIBRATIONPREDICT != 0D) {
        size += 1 + 8;
      }
      if (VibrationZVIBRATIONPREDICT != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GrpcPredictData other) {
      if (other == null) {
        return;
      }
      if (other.RollATTITUDEPREDICT != 0D) {
        RollATTITUDEPREDICT = other.RollATTITUDEPREDICT;
      }
      if (other.YawATTITUDEPREDICT != 0D) {
        YawATTITUDEPREDICT = other.YawATTITUDEPREDICT;
      }
      if (other.PitchATTITUDEPREDICT != 0D) {
        PitchATTITUDEPREDICT = other.PitchATTITUDEPREDICT;
      }
      if (other.XaccRAWIMUPREDICT != 0D) {
        XaccRAWIMUPREDICT = other.XaccRAWIMUPREDICT;
      }
      if (other.YaccRAWIMUPREDICT != 0D) {
        YaccRAWIMUPREDICT = other.YaccRAWIMUPREDICT;
      }
      if (other.ZaccRAWIMUPREDICT != 0D) {
        ZaccRAWIMUPREDICT = other.ZaccRAWIMUPREDICT;
      }
      if (other.XgyroRAWIMUPREDICT != 0D) {
        XgyroRAWIMUPREDICT = other.XgyroRAWIMUPREDICT;
      }
      if (other.YgyroRAWIMUPREDICT != 0D) {
        YgyroRAWIMUPREDICT = other.YgyroRAWIMUPREDICT;
      }
      if (other.ZgyroRAWIMUPREDICT != 0D) {
        ZgyroRAWIMUPREDICT = other.ZgyroRAWIMUPREDICT;
      }
      if (other.XmagRAWIMUPREDICT != 0D) {
        XmagRAWIMUPREDICT = other.XmagRAWIMUPREDICT;
      }
      if (other.YmagRAWIMUPREDICT != 0D) {
        YmagRAWIMUPREDICT = other.YmagRAWIMUPREDICT;
      }
      if (other.ZmagRAWIMUPREDICT != 0D) {
        ZmagRAWIMUPREDICT = other.ZmagRAWIMUPREDICT;
      }
      if (other.VibrationXVIBRATIONPREDICT != 0D) {
        VibrationXVIBRATIONPREDICT = other.VibrationXVIBRATIONPREDICT;
      }
      if (other.VibrationYVIBRATIONPREDICT != 0D) {
        VibrationYVIBRATIONPREDICT = other.VibrationYVIBRATIONPREDICT;
      }
      if (other.VibrationZVIBRATIONPREDICT != 0D) {
        VibrationZVIBRATIONPREDICT = other.VibrationZVIBRATIONPREDICT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RollATTITUDEPREDICT = input.ReadDouble();
            break;
          }
          case 17: {
            YawATTITUDEPREDICT = input.ReadDouble();
            break;
          }
          case 25: {
            PitchATTITUDEPREDICT = input.ReadDouble();
            break;
          }
          case 33: {
            XaccRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 41: {
            YaccRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 49: {
            ZaccRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 57: {
            XgyroRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 65: {
            YgyroRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 73: {
            ZgyroRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 81: {
            XmagRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 89: {
            YmagRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 97: {
            ZmagRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 105: {
            VibrationXVIBRATIONPREDICT = input.ReadDouble();
            break;
          }
          case 113: {
            VibrationYVIBRATIONPREDICT = input.ReadDouble();
            break;
          }
          case 121: {
            VibrationZVIBRATIONPREDICT = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            RollATTITUDEPREDICT = input.ReadDouble();
            break;
          }
          case 17: {
            YawATTITUDEPREDICT = input.ReadDouble();
            break;
          }
          case 25: {
            PitchATTITUDEPREDICT = input.ReadDouble();
            break;
          }
          case 33: {
            XaccRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 41: {
            YaccRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 49: {
            ZaccRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 57: {
            XgyroRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 65: {
            YgyroRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 73: {
            ZgyroRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 81: {
            XmagRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 89: {
            YmagRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 97: {
            ZmagRAWIMUPREDICT = input.ReadDouble();
            break;
          }
          case 105: {
            VibrationXVIBRATIONPREDICT = input.ReadDouble();
            break;
          }
          case 113: {
            VibrationYVIBRATIONPREDICT = input.ReadDouble();
            break;
          }
          case 121: {
            VibrationZVIBRATIONPREDICT = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GrpcWarningData : pb::IMessage<GrpcWarningData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrpcWarningData> _parser = new pb::MessageParser<GrpcWarningData>(() => new GrpcWarningData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GrpcWarningData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KisaGcsSystem.Services.DroneReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcWarningData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcWarningData(GrpcWarningData other) : this() {
      warningCount_ = other.warningCount_;
      rollATTITUDEWARNING_ = other.rollATTITUDEWARNING_;
      pitchATTITUDEWARNING_ = other.pitchATTITUDEWARNING_;
      yawATTITUDEWARNING_ = other.yawATTITUDEWARNING_;
      xaccRAWIMUWARNING_ = other.xaccRAWIMUWARNING_;
      yaccRAWIMUWARNING_ = other.yaccRAWIMUWARNING_;
      zaccRAWIMUWARNING_ = other.zaccRAWIMUWARNING_;
      xgyroRAWIMUWARNING_ = other.xgyroRAWIMUWARNING_;
      ygyroRAWIMUWARNING_ = other.ygyroRAWIMUWARNING_;
      zgyroRAWIMUWARNING_ = other.zgyroRAWIMUWARNING_;
      xmagRAWIMUWARNING_ = other.xmagRAWIMUWARNING_;
      ymagRAWIMUWARNING_ = other.ymagRAWIMUWARNING_;
      zmagRAWIMUWARNING_ = other.zmagRAWIMUWARNING_;
      vibrationXVIBRATIONWARNING_ = other.vibrationXVIBRATIONWARNING_;
      vibrationYVIBRATIONWARNING_ = other.vibrationYVIBRATIONWARNING_;
      vibrationZVIBRATIONWARNING_ = other.vibrationZVIBRATIONWARNING_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GrpcWarningData Clone() {
      return new GrpcWarningData(this);
    }

    /// <summary>Field number for the "warning_count" field.</summary>
    public const int WarningCountFieldNumber = 1;
    private int warningCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WarningCount {
      get { return warningCount_; }
      set {
        warningCount_ = value;
      }
    }

    /// <summary>Field number for the "rollATTITUDE_WARNING" field.</summary>
    public const int RollATTITUDEWARNINGFieldNumber = 2;
    private bool rollATTITUDEWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RollATTITUDEWARNING {
      get { return rollATTITUDEWARNING_; }
      set {
        rollATTITUDEWARNING_ = value;
      }
    }

    /// <summary>Field number for the "pitchATTITUDE_WARNING" field.</summary>
    public const int PitchATTITUDEWARNINGFieldNumber = 3;
    private bool pitchATTITUDEWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PitchATTITUDEWARNING {
      get { return pitchATTITUDEWARNING_; }
      set {
        pitchATTITUDEWARNING_ = value;
      }
    }

    /// <summary>Field number for the "yawATTITUDE_WARNING" field.</summary>
    public const int YawATTITUDEWARNINGFieldNumber = 4;
    private bool yawATTITUDEWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool YawATTITUDEWARNING {
      get { return yawATTITUDEWARNING_; }
      set {
        yawATTITUDEWARNING_ = value;
      }
    }

    /// <summary>Field number for the "xaccRAWIMU_WARNING" field.</summary>
    public const int XaccRAWIMUWARNINGFieldNumber = 5;
    private bool xaccRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool XaccRAWIMUWARNING {
      get { return xaccRAWIMUWARNING_; }
      set {
        xaccRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "yaccRAWIMU_WARNING" field.</summary>
    public const int YaccRAWIMUWARNINGFieldNumber = 6;
    private bool yaccRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool YaccRAWIMUWARNING {
      get { return yaccRAWIMUWARNING_; }
      set {
        yaccRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "zaccRAWIMU_WARNING" field.</summary>
    public const int ZaccRAWIMUWARNINGFieldNumber = 7;
    private bool zaccRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ZaccRAWIMUWARNING {
      get { return zaccRAWIMUWARNING_; }
      set {
        zaccRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "xgyroRAWIMU_WARNING" field.</summary>
    public const int XgyroRAWIMUWARNINGFieldNumber = 8;
    private bool xgyroRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool XgyroRAWIMUWARNING {
      get { return xgyroRAWIMUWARNING_; }
      set {
        xgyroRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "ygyroRAWIMU_WARNING" field.</summary>
    public const int YgyroRAWIMUWARNINGFieldNumber = 9;
    private bool ygyroRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool YgyroRAWIMUWARNING {
      get { return ygyroRAWIMUWARNING_; }
      set {
        ygyroRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "zgyroRAWIMU_WARNING" field.</summary>
    public const int ZgyroRAWIMUWARNINGFieldNumber = 10;
    private bool zgyroRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ZgyroRAWIMUWARNING {
      get { return zgyroRAWIMUWARNING_; }
      set {
        zgyroRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "xmagRAWIMU_WARNING" field.</summary>
    public const int XmagRAWIMUWARNINGFieldNumber = 11;
    private bool xmagRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool XmagRAWIMUWARNING {
      get { return xmagRAWIMUWARNING_; }
      set {
        xmagRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "ymagRAWIMU_WARNING" field.</summary>
    public const int YmagRAWIMUWARNINGFieldNumber = 12;
    private bool ymagRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool YmagRAWIMUWARNING {
      get { return ymagRAWIMUWARNING_; }
      set {
        ymagRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "zmagRAWIMU_WARNING" field.</summary>
    public const int ZmagRAWIMUWARNINGFieldNumber = 13;
    private bool zmagRAWIMUWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ZmagRAWIMUWARNING {
      get { return zmagRAWIMUWARNING_; }
      set {
        zmagRAWIMUWARNING_ = value;
      }
    }

    /// <summary>Field number for the "vibrationXVIBRATION_WARNING" field.</summary>
    public const int VibrationXVIBRATIONWARNINGFieldNumber = 14;
    private bool vibrationXVIBRATIONWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VibrationXVIBRATIONWARNING {
      get { return vibrationXVIBRATIONWARNING_; }
      set {
        vibrationXVIBRATIONWARNING_ = value;
      }
    }

    /// <summary>Field number for the "vibrationYVIBRATION_WARNING" field.</summary>
    public const int VibrationYVIBRATIONWARNINGFieldNumber = 15;
    private bool vibrationYVIBRATIONWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VibrationYVIBRATIONWARNING {
      get { return vibrationYVIBRATIONWARNING_; }
      set {
        vibrationYVIBRATIONWARNING_ = value;
      }
    }

    /// <summary>Field number for the "vibrationZVIBRATION_WARNING" field.</summary>
    public const int VibrationZVIBRATIONWARNINGFieldNumber = 16;
    private bool vibrationZVIBRATIONWARNING_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VibrationZVIBRATIONWARNING {
      get { return vibrationZVIBRATIONWARNING_; }
      set {
        vibrationZVIBRATIONWARNING_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GrpcWarningData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GrpcWarningData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WarningCount != other.WarningCount) return false;
      if (RollATTITUDEWARNING != other.RollATTITUDEWARNING) return false;
      if (PitchATTITUDEWARNING != other.PitchATTITUDEWARNING) return false;
      if (YawATTITUDEWARNING != other.YawATTITUDEWARNING) return false;
      if (XaccRAWIMUWARNING != other.XaccRAWIMUWARNING) return false;
      if (YaccRAWIMUWARNING != other.YaccRAWIMUWARNING) return false;
      if (ZaccRAWIMUWARNING != other.ZaccRAWIMUWARNING) return false;
      if (XgyroRAWIMUWARNING != other.XgyroRAWIMUWARNING) return false;
      if (YgyroRAWIMUWARNING != other.YgyroRAWIMUWARNING) return false;
      if (ZgyroRAWIMUWARNING != other.ZgyroRAWIMUWARNING) return false;
      if (XmagRAWIMUWARNING != other.XmagRAWIMUWARNING) return false;
      if (YmagRAWIMUWARNING != other.YmagRAWIMUWARNING) return false;
      if (ZmagRAWIMUWARNING != other.ZmagRAWIMUWARNING) return false;
      if (VibrationXVIBRATIONWARNING != other.VibrationXVIBRATIONWARNING) return false;
      if (VibrationYVIBRATIONWARNING != other.VibrationYVIBRATIONWARNING) return false;
      if (VibrationZVIBRATIONWARNING != other.VibrationZVIBRATIONWARNING) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (WarningCount != 0) hash ^= WarningCount.GetHashCode();
      if (RollATTITUDEWARNING != false) hash ^= RollATTITUDEWARNING.GetHashCode();
      if (PitchATTITUDEWARNING != false) hash ^= PitchATTITUDEWARNING.GetHashCode();
      if (YawATTITUDEWARNING != false) hash ^= YawATTITUDEWARNING.GetHashCode();
      if (XaccRAWIMUWARNING != false) hash ^= XaccRAWIMUWARNING.GetHashCode();
      if (YaccRAWIMUWARNING != false) hash ^= YaccRAWIMUWARNING.GetHashCode();
      if (ZaccRAWIMUWARNING != false) hash ^= ZaccRAWIMUWARNING.GetHashCode();
      if (XgyroRAWIMUWARNING != false) hash ^= XgyroRAWIMUWARNING.GetHashCode();
      if (YgyroRAWIMUWARNING != false) hash ^= YgyroRAWIMUWARNING.GetHashCode();
      if (ZgyroRAWIMUWARNING != false) hash ^= ZgyroRAWIMUWARNING.GetHashCode();
      if (XmagRAWIMUWARNING != false) hash ^= XmagRAWIMUWARNING.GetHashCode();
      if (YmagRAWIMUWARNING != false) hash ^= YmagRAWIMUWARNING.GetHashCode();
      if (ZmagRAWIMUWARNING != false) hash ^= ZmagRAWIMUWARNING.GetHashCode();
      if (VibrationXVIBRATIONWARNING != false) hash ^= VibrationXVIBRATIONWARNING.GetHashCode();
      if (VibrationYVIBRATIONWARNING != false) hash ^= VibrationYVIBRATIONWARNING.GetHashCode();
      if (VibrationZVIBRATIONWARNING != false) hash ^= VibrationZVIBRATIONWARNING.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WarningCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WarningCount);
      }
      if (RollATTITUDEWARNING != false) {
        output.WriteRawTag(16);
        output.WriteBool(RollATTITUDEWARNING);
      }
      if (PitchATTITUDEWARNING != false) {
        output.WriteRawTag(24);
        output.WriteBool(PitchATTITUDEWARNING);
      }
      if (YawATTITUDEWARNING != false) {
        output.WriteRawTag(32);
        output.WriteBool(YawATTITUDEWARNING);
      }
      if (XaccRAWIMUWARNING != false) {
        output.WriteRawTag(40);
        output.WriteBool(XaccRAWIMUWARNING);
      }
      if (YaccRAWIMUWARNING != false) {
        output.WriteRawTag(48);
        output.WriteBool(YaccRAWIMUWARNING);
      }
      if (ZaccRAWIMUWARNING != false) {
        output.WriteRawTag(56);
        output.WriteBool(ZaccRAWIMUWARNING);
      }
      if (XgyroRAWIMUWARNING != false) {
        output.WriteRawTag(64);
        output.WriteBool(XgyroRAWIMUWARNING);
      }
      if (YgyroRAWIMUWARNING != false) {
        output.WriteRawTag(72);
        output.WriteBool(YgyroRAWIMUWARNING);
      }
      if (ZgyroRAWIMUWARNING != false) {
        output.WriteRawTag(80);
        output.WriteBool(ZgyroRAWIMUWARNING);
      }
      if (XmagRAWIMUWARNING != false) {
        output.WriteRawTag(88);
        output.WriteBool(XmagRAWIMUWARNING);
      }
      if (YmagRAWIMUWARNING != false) {
        output.WriteRawTag(96);
        output.WriteBool(YmagRAWIMUWARNING);
      }
      if (ZmagRAWIMUWARNING != false) {
        output.WriteRawTag(104);
        output.WriteBool(ZmagRAWIMUWARNING);
      }
      if (VibrationXVIBRATIONWARNING != false) {
        output.WriteRawTag(112);
        output.WriteBool(VibrationXVIBRATIONWARNING);
      }
      if (VibrationYVIBRATIONWARNING != false) {
        output.WriteRawTag(120);
        output.WriteBool(VibrationYVIBRATIONWARNING);
      }
      if (VibrationZVIBRATIONWARNING != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(VibrationZVIBRATIONWARNING);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WarningCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WarningCount);
      }
      if (RollATTITUDEWARNING != false) {
        output.WriteRawTag(16);
        output.WriteBool(RollATTITUDEWARNING);
      }
      if (PitchATTITUDEWARNING != false) {
        output.WriteRawTag(24);
        output.WriteBool(PitchATTITUDEWARNING);
      }
      if (YawATTITUDEWARNING != false) {
        output.WriteRawTag(32);
        output.WriteBool(YawATTITUDEWARNING);
      }
      if (XaccRAWIMUWARNING != false) {
        output.WriteRawTag(40);
        output.WriteBool(XaccRAWIMUWARNING);
      }
      if (YaccRAWIMUWARNING != false) {
        output.WriteRawTag(48);
        output.WriteBool(YaccRAWIMUWARNING);
      }
      if (ZaccRAWIMUWARNING != false) {
        output.WriteRawTag(56);
        output.WriteBool(ZaccRAWIMUWARNING);
      }
      if (XgyroRAWIMUWARNING != false) {
        output.WriteRawTag(64);
        output.WriteBool(XgyroRAWIMUWARNING);
      }
      if (YgyroRAWIMUWARNING != false) {
        output.WriteRawTag(72);
        output.WriteBool(YgyroRAWIMUWARNING);
      }
      if (ZgyroRAWIMUWARNING != false) {
        output.WriteRawTag(80);
        output.WriteBool(ZgyroRAWIMUWARNING);
      }
      if (XmagRAWIMUWARNING != false) {
        output.WriteRawTag(88);
        output.WriteBool(XmagRAWIMUWARNING);
      }
      if (YmagRAWIMUWARNING != false) {
        output.WriteRawTag(96);
        output.WriteBool(YmagRAWIMUWARNING);
      }
      if (ZmagRAWIMUWARNING != false) {
        output.WriteRawTag(104);
        output.WriteBool(ZmagRAWIMUWARNING);
      }
      if (VibrationXVIBRATIONWARNING != false) {
        output.WriteRawTag(112);
        output.WriteBool(VibrationXVIBRATIONWARNING);
      }
      if (VibrationYVIBRATIONWARNING != false) {
        output.WriteRawTag(120);
        output.WriteBool(VibrationYVIBRATIONWARNING);
      }
      if (VibrationZVIBRATIONWARNING != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(VibrationZVIBRATIONWARNING);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (WarningCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningCount);
      }
      if (RollATTITUDEWARNING != false) {
        size += 1 + 1;
      }
      if (PitchATTITUDEWARNING != false) {
        size += 1 + 1;
      }
      if (YawATTITUDEWARNING != false) {
        size += 1 + 1;
      }
      if (XaccRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (YaccRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (ZaccRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (XgyroRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (YgyroRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (ZgyroRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (XmagRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (YmagRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (ZmagRAWIMUWARNING != false) {
        size += 1 + 1;
      }
      if (VibrationXVIBRATIONWARNING != false) {
        size += 1 + 1;
      }
      if (VibrationYVIBRATIONWARNING != false) {
        size += 1 + 1;
      }
      if (VibrationZVIBRATIONWARNING != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GrpcWarningData other) {
      if (other == null) {
        return;
      }
      if (other.WarningCount != 0) {
        WarningCount = other.WarningCount;
      }
      if (other.RollATTITUDEWARNING != false) {
        RollATTITUDEWARNING = other.RollATTITUDEWARNING;
      }
      if (other.PitchATTITUDEWARNING != false) {
        PitchATTITUDEWARNING = other.PitchATTITUDEWARNING;
      }
      if (other.YawATTITUDEWARNING != false) {
        YawATTITUDEWARNING = other.YawATTITUDEWARNING;
      }
      if (other.XaccRAWIMUWARNING != false) {
        XaccRAWIMUWARNING = other.XaccRAWIMUWARNING;
      }
      if (other.YaccRAWIMUWARNING != false) {
        YaccRAWIMUWARNING = other.YaccRAWIMUWARNING;
      }
      if (other.ZaccRAWIMUWARNING != false) {
        ZaccRAWIMUWARNING = other.ZaccRAWIMUWARNING;
      }
      if (other.XgyroRAWIMUWARNING != false) {
        XgyroRAWIMUWARNING = other.XgyroRAWIMUWARNING;
      }
      if (other.YgyroRAWIMUWARNING != false) {
        YgyroRAWIMUWARNING = other.YgyroRAWIMUWARNING;
      }
      if (other.ZgyroRAWIMUWARNING != false) {
        ZgyroRAWIMUWARNING = other.ZgyroRAWIMUWARNING;
      }
      if (other.XmagRAWIMUWARNING != false) {
        XmagRAWIMUWARNING = other.XmagRAWIMUWARNING;
      }
      if (other.YmagRAWIMUWARNING != false) {
        YmagRAWIMUWARNING = other.YmagRAWIMUWARNING;
      }
      if (other.ZmagRAWIMUWARNING != false) {
        ZmagRAWIMUWARNING = other.ZmagRAWIMUWARNING;
      }
      if (other.VibrationXVIBRATIONWARNING != false) {
        VibrationXVIBRATIONWARNING = other.VibrationXVIBRATIONWARNING;
      }
      if (other.VibrationYVIBRATIONWARNING != false) {
        VibrationYVIBRATIONWARNING = other.VibrationYVIBRATIONWARNING;
      }
      if (other.VibrationZVIBRATIONWARNING != false) {
        VibrationZVIBRATIONWARNING = other.VibrationZVIBRATIONWARNING;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WarningCount = input.ReadInt32();
            break;
          }
          case 16: {
            RollATTITUDEWARNING = input.ReadBool();
            break;
          }
          case 24: {
            PitchATTITUDEWARNING = input.ReadBool();
            break;
          }
          case 32: {
            YawATTITUDEWARNING = input.ReadBool();
            break;
          }
          case 40: {
            XaccRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 48: {
            YaccRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 56: {
            ZaccRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 64: {
            XgyroRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 72: {
            YgyroRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 80: {
            ZgyroRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 88: {
            XmagRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 96: {
            YmagRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 104: {
            ZmagRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 112: {
            VibrationXVIBRATIONWARNING = input.ReadBool();
            break;
          }
          case 120: {
            VibrationYVIBRATIONWARNING = input.ReadBool();
            break;
          }
          case 128: {
            VibrationZVIBRATIONWARNING = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WarningCount = input.ReadInt32();
            break;
          }
          case 16: {
            RollATTITUDEWARNING = input.ReadBool();
            break;
          }
          case 24: {
            PitchATTITUDEWARNING = input.ReadBool();
            break;
          }
          case 32: {
            YawATTITUDEWARNING = input.ReadBool();
            break;
          }
          case 40: {
            XaccRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 48: {
            YaccRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 56: {
            ZaccRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 64: {
            XgyroRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 72: {
            YgyroRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 80: {
            ZgyroRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 88: {
            XmagRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 96: {
            YmagRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 104: {
            ZmagRAWIMUWARNING = input.ReadBool();
            break;
          }
          case 112: {
            VibrationXVIBRATIONWARNING = input.ReadBool();
            break;
          }
          case 120: {
            VibrationYVIBRATIONWARNING = input.ReadBool();
            break;
          }
          case 128: {
            VibrationZVIBRATIONWARNING = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
